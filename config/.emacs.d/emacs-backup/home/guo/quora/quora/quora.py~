
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

#from tensor2tensor.utils import models
from tensor2tensor.data_generators import problem
from tensor2tensor.data_generators import text_problems
from tensor2tensor.utils import registry

from tensor2tensor.utils import FLAGS

FLAGS = flags.FLAGS
flags.DEFINE_string("quora_dir", "/home/guo/data/kaggle/quora/", "")

import pandas as pd
import tensorflow as tf

import pdb

flags = tf.flags
FLAGS = flags.FLAGS
flags.DEFINE_string("quora_dir", "/home/guo/data/kaggle/quora/", "")


@registry.register_hparams
class QuoraInsincereQuestion(text_problems.Text2ClassProblem):
    """ Quora Insincere Question binary classification problem"""

    @property
    def is_generate_per_split(self):
        return True
    
    def generate_samples(self, data_dir, tmp_dir, dataset_split):
        train = pd.read_csv(FLAGS.quora_dir + "train.csv")
        df = train.sample(frac=1).reset_index(drop=True)
        if dataset_split == problem.DatasetSplit.TRAIN:
            df = df[:1000000]
        else:
            df = df[1000000:]
        for _, text, target in df.values:
            yield {
                "inputs" : text,
                "target" : int(target),
            }

    @property
    def num_classes(self):
        return 2

    
    
def main(unused_args):
    del unused_args
    
    
if __name__ == '__main__':
    app.run(main)
    
