
import numpy as np
import tensorflow as tf
from glob import glob
from absl import app


class Dataset(object):

    def __init__(self, mode='train'):
        data_dir = "/home/guo/data/kaggle/oid/tfrecords/"
        self.tfrecords = glob(data_dir+"{}.tfrecord-0000*-of-00100".format(mode))

    @property
    def dataset(self):
        raw_dataset = tf.data.TFRecordDataset(self.tfrecords)
        image_feature_description = {
            "image/class/label": tf.io.VarLenFeature(tf.int64),
            "image/class/text": tf.io.VarLenFeature(tf.string),
            'image/encoded': tf.io.FixedLenFeature((), tf.string, default_value=''),
            'image/format': tf.io.FixedLenFeature((), tf.string, default_value='jpeg'),
            "image/filename": tf.io.FixedLenFeature((), tf.string, default_value=''),
            "image/object/bbox/xmax": tf.io.VarLenFeature(tf.float32),
            "image/object/bbox/xmin": tf.io.VarLenFeature(tf.float32),
            "image/object/bbox/ymax": tf.io.VarLenFeature(tf.float32),
            "image/object/bbox/ymin": tf.io.VarLenFeature(tf.float32),
            "image/object/class/label": tf.io.VarLenFeature(tf.int64),
            "image/object/class/text": tf.io.VarLenFeature(tf.string),
            "image/object/group_of": tf.io.VarLenFeature(tf.int64),
            "image/source_id": tf.io.FixedLenFeature((), tf.string, default_value=''),
        }
        def _parse_image_function(example_proto):
            example = tf.io.parse_single_example(example_proto, image_feature_description)
            image = tf.io.decode_jpeg(example["image/encoded"], channels=3)
            example["image/decoded"] = image
            example["image/shape"] = tf.shape(image)
            return example
        parsed_dataset = raw_dataset.map(_parse_image_function)
        return parsed_dataset


def main(unused_args):
    del unused_args


if __name__ == '__main__':
    app.run(main)

