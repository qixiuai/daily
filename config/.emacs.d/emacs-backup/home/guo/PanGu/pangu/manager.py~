
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function


def get_stage_data():
    """ stage/report """
    row_names = ["wk(tib)", "rem", "n1", "n2", "n3", "sleep_efficency", "sleep_onset"]
    col_names = ["lasting_time", "time_in_bed_ratio", "total_sleep_ratio",
                 "latency", "from_close_light", "from_sleep_onset"]
    
def get_spo2_data():
    """ spo2/report"""
    row_names = ["lowest_tib", "lowest_tst", "mean_tib", "mean_rem", "mean_nrem",
                 "lowest_resp_related", "nod", "odi",
                 "less_90", "less_85", "less_80", "max_od", "dur_of_longest_od"]
    col_names = ["wake", "rem", "nrem", "total"]


def get_resp_data():
    """ resp/report"""
    row_names = ["ahi", "rera_index", "ai", "hi", "rdi", "dur_of_longest_apnea",
                 "apnea", "oa", "ca", "ma", "hypopnea"]
    col_names = ["times_happed/total", "times_happed/rem", "times_happed/nrem",
                 "longest_dur", "mean_dur"]

def get_body_pos_data():
    """ body_pos/report """
    row_names = ["s", "l", "r", "p", "u"]
    col_names = ["duration", "ca", "ma", "oa", "hyp", "ahi", "rera", "rdi", "desat"]

def get_heart_data():
    """ heart """
    row_names = ["mean_hr_nrem", "mean_hr", "max_hr", "min_hr"]

def get_leg_movement():
    """ leg/report """
    row_names = ["num_plm", "num_plm_wake", "plm_index", "plm_wake_index"]


def get_chart_data():
    """ chart/spo2|hr|ca|oa|ma|hyp|pos|stage/num_epcohs|epoch_index/[max,min] """
    pass
    
def get_stage_wake_event():
    """ stage/event/wake|n1|n2|n3|rem """
    event = [start, end]

def get_arousal_event():
    """ stage/event/arousal """
    event = [start, end]
    
def get_oa_resp_event():
    """ resp/event/oa """
    event = [start, end]

def get_ca_resp_event():
    """ resp/event/ca """
    event = [start, end]

def get_ma_resp_event():
    """ resp/event/ma """
    event = [start, end]

def get_hyp_resp_event():
    """ resp/event/hyp """
    event = [start, end]

def get_od_event():
    event = [start, end]

def get_leg_event():
    event = [start, end]

    
class Manager(object):

    def __init__(self):
        self._db = {}
        
    @property
    def db(self):
        return self._db
        
    def add_task(self):
        pass

    def master(self):
        pass

    def slaves(self):
        pass

    def schedule(self):
        pass
