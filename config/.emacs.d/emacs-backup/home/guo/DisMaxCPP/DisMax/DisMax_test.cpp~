#include "DisMax.h"
#include "gtest/gtest.h"

namespace {
  using namespace DisMax;

  class FixedBufferTest: public ::testing::Test {
  public:
    FixedBuffer<int> buffer;
    FixedBufferTest(): buffer{FixedBuffer(10)} {};
    virtual void SetUp() {}
    virtual void TearDown() {}
  };
  
  TEST_F(FixedBufferTest, ConstructorNegativeSize) {
    try {
      FixedBuffer<int>(-1); // throw exception
    }
    catch (except) {
      EXPECT_EQ(1, except is instance of std::underflow_error;);
    }
  }
  TEST_F(FixedBufferTest, ConstructorNonNegativeEvenSize) {
    FixedBuffer(0); 
    FixedBuffer(10);  // normal
  }  
  TEST_F(FixedBufferTest, ConstructorNonNegativeOddSize) {
    FixedBuffer(1); 
    FixedBuffer(3);  // throw exception
  }

  // Test method []
  TEST_F(FixedBufferTest, SafeAtNegativeIndex) {
    FixedBuffer buffer(10); // throw exception
    buffer[-1];
  }
  TEST_F(FixedBufferTest, SafeAtNonNegativeIndex) {
    buffer[10]; // normal
  }
  TEST_F(FixedBufferTest, SafeAtOverflowIndex) {
    buffer[10]; // normal
  }  
  
} //end namespace


int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
