
import tensorflow as tf
from model import get_model
from isruc import RawIsruc
from absl import app


def main(unused_args):
    del unused_args

    debug = False
    if debug:
        NUM_EPOCHS = 200
        BATCH_SIZE = 1#512
        NUM_BATCHES_PER_EPOCH = 1
    else:
        NUM_EPOCHS = 1000
        BATCH_SIZE = 512
        NUM_BATCHES_PER_EPOCH = 10000000
    BUFFER_SIZE = 10 * BATCH_SIZE
    train_isruc = RawIsruc(mode="train")
    valid_isruc = RawIsruc(mode="validation")
    
    train_dataset = tf.data.Dataset.from_generator(train_isruc, (tf.float32, tf.int64))
    valid_dataset = tf.data.Dataset.from_generator(valid_isruc, (tf.float32, tf.int64))
    train_dataset = train_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=False)
    valid_dataset = valid_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=False)

    model = get_model()
    optimizer = tf.keras.optimizers.Adam()
    loss_fn = tf.keras.losses.sparse_categorical_crossentropy
    model.compile(loss="sparse_categorical_crossentropy",
                   optimizer=optimizer,
                   metrics=["accuracy"])
    model.fit(train_dataset, epochs=1, steps_per_epoch=10)

    
if __name__ == '__main__':
    app.run(main)


