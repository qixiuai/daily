
import numpy as np
import tensorflow as tf

from isruc import RawIsruc


tfrecord_dir = "/home/guo/Joint/courage/data/"

def _float_feature(values):
    return tf.train.Feature(float_list=tf.train.FloatList(value=values))

def _int64_feature(values):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=values))

def serialize_example(features, targets):
    """
    features: {"channel": channel}
    targets: 1D np.array()
    """
    shape = features.shape
    targets = np.asarray(targets, dtype=np.int64)
    feature = {
        "X" : _float_feature(features.flatten().tolist()),
        "X_shape :" : _int64_feature(list(shape)),
        "y" : _int64_feature(targets.flatten().tolist()),
    }
    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))
    return example_proto.SerializeToString()


def gen_tfrecord(tfname_prefix, generator, batch_size):
    writer = None
    tfrecord_id = 0
    for id, (example, target) in enumerate(generator):
        if id % batch_size == 0:
            if writer:
                writer.close()
            record_file = tfrecord_dir + "{}.tfrecord-" + "{:d}".format(tfname_prefix, tfrecord_id)
            tfrecord_id += 1
            print(record_file)
            writer = tf.io.TFRecordWriter(record_file)
        str = serialize_example(example, target)
        writer.write(str)
    writer.close()


def main():
    step = 25
    channels = ["C3_A2", "O1_A2", "LOC_A2", "ROC_A1", "X1"]
    batch_size = 64
    train_isruc = RawIsruc(mode="train", step=step, class_balanced=False, channels=channels)
    valid_isruc = RawIsruc(mode="validation", step=step, class_balanced=False, channels=channels)
    test_isruc = RawIsruc(mode="test", step=step, class_balanced=False, channels=channels)
    gen_tfrecord("train-isruc-{}".format(step), train_isruc(), batch_size)
    gen_tfrecord("valid-isruc-{}".format(step), valid_isruc(), batch_size)
    gen_tfrecord("test-isruc-{}".format(step), test_isruc(), batch_size)


if __name__ == "__main__":
    main()
