
import zmq
import pickle
import numpy as np
from dataset.isruc import RawIsruc


class DataCenter(object):

    def __init__(self):
        #self._caches = {} # key: db
        self._counter = 0
        
    def cleanup(self):
        pass

    def extract_key(self, param):
        mode = param["mode"]
        step = str(param["step"])
        channels = param["channels"]
        items = [mode, step] + channels
        return ",".join(items)

    def add_dataset(self, param):
        dataset = RawIsruc(mode=param["mode"], step=param["step"], channels=param["channels"], class_balanced=False)
        self._dataset = dataset
        self._instance = dataset()

    def take(self):
        self._counter += 1
        if self._counter == 100:
            print(".",end="", flush=True)
            self._counter = 0
        try:
            examples, targets = next(self._instance)
        except StopIteration:
            self._instance = self._dataset()
            examples, targets = "", ""
        return (examples, targets)

data_center = DataCenter()

context = zmq.Context()
socket = context.socket(zmq.REP)
socket.bind("ipc://DataServer")

while True:
    message = socket.recv()
    key = pickle.loads(message)
    if len(key) > 0:
        data_center.add_dataset(key)
    data = data_center.take()
    socket.send(pickle.dumps(data))




