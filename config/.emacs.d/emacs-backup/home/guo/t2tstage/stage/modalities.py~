from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from tensor2tensor.utils import modality
import tensorflow as tf


class ClassLabelStageModality(modality.Modality):
    """ Used for sleep stage """

    @property
    def name(self):
        return "stage_modailtiy_%d_%d" % (
            self._vocab_size,
            self._body_input_depth)

    def bottom(self, x):
        pass

    def targets_bottom(self, x):
        return x
    
    def top(self, body_output, _):
        with tf.variable_scope(self.name):
            x = body_output
            x = tf.reduce_mean(x, axis=[1,2], keepdims=True)
            res = tf.layers.dense(x, self._vocab_size)
            return res

    def loss(self, top_out, targets, weights_fn=None):
        #if weights_fn is None:
        #    weights = self.targets_weights_fn(targets)
        loss_scale = tf.losses.sparse_softmax_cross_entropy(
            labels=targets,
            logits=top_out,
            reduction=tf.losses.Reduction.SUM_BY_NONZERO_WEIGHTS)
            #label_smoothing=self._model_hparams.label_smoothing)
        #loss_denom = tf.reduce_sum(weights)
        return loss_scale, tf.constant(1, dtype=tf.float32)
