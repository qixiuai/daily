#ifndef _PSG_API_DATA_
#define _PSG_API_DATA_

#include <vector>
#include <string>
#include <unordered_map>
#include <utility>

#include "cpprest/json.h"

namespace psg {

  namespace comm {

    struct Event {
      int start;
      int end;
      std::string signal_name;
      Event() = default;
      Event(int st, int ed, std::string name) {
	start = st;
	end = ed;
	signal_name = name;
      }
      std::string to_string() {
	return std::to_string(start) + '_' +
	  std::to_string(end) + "_" + signal_name;
      }
    };
  
    using Events = std::unordered_map<std::string, Event>;
  
    std::string to_string(const Events& events);
  
    struct PSGEvents {
      Events arousal;
      Events leg;
      Events resp_oa;
      Events resp_ca;
      Events resp_ma;
      Events resp_hyp;
      Events heart;
      Events spo2;
      Events stage;
    };

    using Report = std::unordered_map<std::string, float>;

    using ChartEpoch = std::pair<float, float>;
    
    struct Chart {
      std::vector<ChartEpoch> spo2;
      std::vector<ChartEpoch> hr;
      std::vector<float> oa;
      std::vector<float> ca;
      std::vector<float> ma;
      std::vector<float> hyp;

      std::vector<int> pose;
      std::vector<int> stage;


      std::string _to_string_events(const std::vector<ChartEpoch>& events) const {
	std::string msg;
	for (auto evt : events) {
	  msg.append(std::to_string(evt.first) + '_' + std::to_string(evt.second) + ',');
	}
	msg[msg.size()-1] = '\n';
	return msg;
      }
    
      std::string to_string() const {
	std::string msg;
	msg.append("SpO2,");
	_to_string_events(spo2);
	msg.append("Heart,");
	_to_string_events(hr);
	msg.append("OA,");
	for (auto state : oa) {
	  msg.append(std::to_string(state)+',');
	}
	msg[msg.size()-1] = '\n';
	msg.append("CA,");
	for (auto state : ca) {
	  msg.append(std::to_string(state)+',');
	}
	msg[msg.size()-1] = '\n';
	msg.append("MA,");
	for (auto state : ma) {
	  msg.append(std::to_string(state)+',');
	}
	msg[msg.size()-1] = '\n';
	msg.append("Hypnea,");
	for (auto state : hyp) {
	  msg.append(std::to_string(state)+',');
	}
	msg[msg.size()-1] = '\n';
	msg.append("Pose,");
	for (auto state : pose) {
	  msg.append(std::to_string(state)+',');
	} 
	msg[msg.size()-1] = '\n';
	msg.append("Stage,");
	for (auto state : stage) {
	  msg.append(std::to_string(state)+',');
	}
	msg[msg.size()-1] = '\n';
	return msg;
      }
    };
        
    struct PSGComm {
      PSGEvents events;
      Report    report;
      Chart     chart;
      std::vector<int> stages;
      std::vector<int> ipks; // TODO
      std::vector<int> spo2_signal;
      std::vector<int> pose_signal;
    };

    using DB = std::unordered_map<std::string, PSGComm>;
  
  }

}
#endif
