
import untangle
import ecgpeaks
import pdb
import plotly.graph_objs as go
from absl import app
from glob import glob
from plotly.offline import plot

def load_subject(xml_path):
    obj = untangle.parse(xml_path)
    components = obj.AnnotatedECG.component.series.component.sequenceSet.component
    dataset = {}
    for component in components[1:]:
        signal_name = component.sequence.code["code"]
        signal_value_strs = component.sequence.value.digits.cdata.strip().split(' ')
        signal_value = list(map(int, signal_value_strs))
        dataset[signal_name] = signal_value
    return dataset


class MedexsDataset(object):

    def __init__(self):
        self._data_dir = "/home/guo/physio/medexs/"
        self._files = glob(self._data_dir + "*.xml")
        
    def generate_data(self):
        pass

    def __call__(self):
        for xml in self._files:
            dataset = load_subject(xml)
            yield dataset["MDC_ECG_LEAD_V3"]


def main(argv):
    del argv
    import time
    medexs = MedexsDataset()
    for signal in medexs():
        peak_indices, peak_values = ecgpeaks.findpeaks_in_ecg(signal)
        plot([go.Scatter(y=signal), go.Scatter(x=peak_indices, y=peak_values,mode="markers")])
        time.sleep(2)
    
if __name__ == '__main__':
    app.run(main)
