# *-* python *-*

def clean_dep(dep):
    return str(Label(dep))

def if_linux_x86_64(a, other_wise=[]):
    return select({
        clean_dep("//tensorflow:linux_x86_64"): a,
        "//conditions:default": other_wise,
    })


def get_win_copts(is_external = False):
    return []

def tf_copts(is_external = False):
    copts = [
        "-std=c++17",
    ]
    return copts

def tf_gen_op_libs(op_lib_names, deps = None, is_external = True):
    if not deps:
        deps = []
    for n in op_lib_names:
        native.cc_library(
            name = n + "_op_lib",
            copts = tf_copts(is_external = is_external),
            srcs = ["ops/" + n + ".cc"],
            deps = deps + [clean_dep("//tensorflow/core:framework")],
            visibility = ["//visibility:public"],
            alwayslink = 1,
            linkstatic = 1,
        )

def _py_wrap_cc_impl(ctx):
    srcs = ctx.files.srcs
    if len(srcs) != 1:
        fail("Exactly one SWIG source file label must be specified.","srcs")
    module_name = ctx.attr.module_name
    src = ctx.files.srcs[0]
    inputs = []
    swig_include_dirs = []
    args = [
        "-c++",
        "-python",
        "-module",
        module_name,
        "-o",
        ctx.outputs.cc_out.path,
        "-outdir",
        ctx.outputs.py_out.dirname,
    ]
    outputs = []
    ctx.actions.run(
        executable = ctx.executable._swig,
        arguments = args,
        inputs = iputs,
        outputs = outputs,
        mnemonic = "PythonSwig",
        progress_message = "SWIGing" + src.path,
    )
    return struct(files = depset(outputs))
        


print(clean_dep("dep"))


