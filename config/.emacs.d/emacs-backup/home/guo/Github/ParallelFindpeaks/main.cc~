
#include <vector>
#include <string>
#include <fstream>
#include <iostream>


std::vector<float> read_csv(std::string filepath) {
  std::vector<float> data;
  data.reserve(5100000);
  std::ifstream in(filepath);

  float value;
  while (in >> value) {
    data.push_back(value);
  }  
  return data;
}

std::vector<int> findpeaks(const std::vector<float>& data,
			   int dist,
			   float height) {
  int data_len = data.size();

  // parallel
  std::vector<float> diff(data_len-1);
  for (int i = 0; i < data_len; i++) {
    diff[i] = data[i+1] - data[i];
  }

  // parallel
  vector<int> ipks;
  for (int i = 0; i < diff.size(); i++) {
    if (diffs[i] >= 0 &&
	diffs[i+1] <= 0 &&
	signal[i] > height) {
      ipks.push_back(i+1);
    }
  }

  // parallel
  std::vector<int> sorted_ipks = sort_peaks(signal, ipks);

  // handle parallel
  std::vector<bool> flags = vector<bool>(data_len, false);
  for (const auto idx: ipks) {
    flags[idx] = true;
  }
  
  for (const auto ipk: sorted_ipks) {
    if (flags[ipk]) {
      auto sl_st = std::max(0, ipk - dist);
      auto sl_ed = std::min(int(signal.size() - 1), ipk + dist);
      for (int i = sl_st; i <= sl_ed; i++) {
	flags[i] = false;
      }
      flags[ipk] = true;
    }
  }
  
  std::vector<int> ipks_selected;
  for (int i = 0; i < flags.size(); i++) {
    if (flags[i]) {
      ipks_selected.push_back(i);
    }
  }
  
  return ipks_selected;
}



int main() {
  using namespace std;
  
  std::string ecg_path = "/home/guo/Github/ParallelFindpeaks/data/ecg.txt";
  auto ecg = read_csv(ecg_path);
  
  cerr << ecg.size() << '\n';
  
  return 0;
}


