/*
  build a simple graph, and run it with a session
========================================================*/

#include <cstdio>
#include <functional>
#include <string>
#include <vector>

#include "tensorflow/cc/ops/standard_ops.h"
#include "tensorflow/core/framework/graph.pb.h"
#include "tensorflow/core/framework/tensor.h"
#include "tensorflow/core/graph/default_device.h"
#include "tensorflow/core/graph/graph_def_builder.h"
#include "tensorflow/core/lib/core/threadpool.h"
#include "tensorflow/core/lib/strings/str_util.h"
#include "tensorflow/core/lib/strings/stringprintf.h"
#include "tensorflow/core/platform/init_main.h"
#include "tensorflow/core/platform/logging.h"
#include "tensorflow/core/platform/types.h"
#include "tensorflow/core/public/session.h"

using tensorflow::string;
using tensorflow::int32;


namespace tensorflow {
  namespace haha {

    struct Options {
      int num_concurrent_sessions = 1;
      int num_concurrent_steps = 10;
      int num_iterations = 100;
      bool use_gpu = false;
    };

    
    GraphDef CreateGraphDef() {
      Scope root = Scope::NewRootScope();
      using namespace ::tensorflow::ops;
      auto a = Const<float>(root, {{3, 2}, {-1, 0}});
      auto x = Const(root.WithOpName("x"), {{1.f}, {1.f}});
      auto y = MatMul(root.WithOpName("y"), a, x);

      GraphDef def;
      TF_CHECK_OK(root.ToGraphDef(&def));
 
      return def;
    }

    void ConcurrentSteps() {
      SessionOptions options;
      std::unique_ptr<Session> session(NewSession(options));
      GraphDef def = CreateGraphDef();
      if (options.target.empty()) {
	graph::SetDefaultDevice("/cpu:0", &def);
      }

      TF_CHECK_OK(session->Create(def));

      std::unique_ptr<thread::ThreadPool> step_threads(
          new thread::ThreadPool(Env::Default(), "trainer", 10));
      
      step_threads->Schedule([&session]() {
	  Tensor x(DT_FLOAT, TensorShape({2, 1}));
	  auto x_flat = x.flat<float>();
	  x_flat.setRandom();
	  x_flat(0) = 2;
	  x_flat(1) = 1;
	  std::vector<Tensor> outputs;
	  outputs.clear();
	  TF_CHECK_OK(session->Run({{"x", x}}, {"y:0"}, {}, &outputs));
	  auto y = outputs[0];
	  auto y_flat = y.flat<float>();
	  fprintf(stderr, "%f\t%f\n", x_flat(0), x_flat(1));
	  fprintf(stderr, "%f\t%f\n", y_flat(0), y_flat(1));
	});
    }
  }
}


int main(int argc, char* argv[]) {
  fprintf(stderr, "Haha world!\n");
  
  tensorflow::port::InitMain(argv[0], &argc, &argv);
  
  tensorflow::haha::ConcurrentSteps();
  
  return 0;
}




