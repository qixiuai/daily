
#include "rest_server.h"

Handler::Handler() {
  // init here
  // start tensorflow server
}

Handler::Handler(utility::string_t url):m_listener(url) {
  m_listener.support(methods::GET,  std::bind(&Handler::_get,    this, std::placeholders::_1));
  m_listener.support(methods::PUT,  std::bind(&Handler::_put,    this, std::placeholders::_1));
  m_listener.support(methods::POST, std::bind(&Handler::_post,   this, std::placeholders::_1));
  m_listener.support(methods::DEL,  std::bind(&Handler::_delete, this, std::placeholders::_1));
}

Handler::~Handler() {
  // release resources
}

void Handler::_handle_error(pplx::task<void>& t) {
  try {
    t.get();
  }
  catch(...) {
    fprintf(stderr, "from handle error\n");
  }
}

void Handler::_get(http_request message) {
  ucout << message.to_string() << endl;
  message.reply(status_codes::OK, message.to_string());
  return;
}

void Handler::_put(http_request message) {
  ucout << message.to_string() << endl;
  message.reply(status_codes::OK, message.to_string());
  return;
}

void Handler::_post(http_request message) {
  ucout << message.to_string() << endl;
  message.reply(status_codes::OK, message.to_string());
  return;
}

void Handler::_delete(http_request message) {
  ucout << message.to_string() << endl;
  message.reply(status_codes::OK, message.to_string());
  return;
}




int main() {
  Handler hander("192.168.3.27:8080");
  
  return 0;
}


