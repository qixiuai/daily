
def _py_wrap_cc_impl(ctx):
    pass


_py_wrap_cc = rule(
    attrs = {},
    outputs = {},
    implementation = _py_wrap_cc_impl,
)

'''
def tf_cc_shared_object(
        name,
        srcs = [],
        deps = [],
        data = [],
        linkopts = [],
        framework_so = tf_binary_additional_srcs(),
        soversion = None,
        kernels = None,
        per_os_targets = False,
        visibility = None,
        **kwargs):
    native.cc_binary(
        name = name_os_full,
        srcs = srcs + framework_so,
        deps = deps,
        linkshared = 1,
        data = data + data_extra,
        linkopts = linkopts + _rpath_linkopts(name_os_full) + select({
            clean_dep("//tensorflow:macos"): [
                "-Wl,-install_name,@rpath/" + soname,
            ],
            clean_dep("//tensorflow:windows"): [],
            "//conditions:default": [
                "-Wl,-soname," + soname,
            ],
        }),
        visibility = visibility,
        **kwargs
    )
    
    flat_names = [item for sublist in names for item in sublist]
    if name not in flat_names:
        native.filegroup(
            name = name,
            srcs = select({
                "//tensorflow:windows": [":%s.dll" % (name)],
                "//tensorflow:macos": [":lib%s%s.dylib" % (name, longsuffix)],
                "//conditions:default": [":lib%s.so%s" % (name, longsuffix)],
            }),
            visibility = visibility,
        )
'''

def tf_py_wrap_cc(
        name,
        srcs,
        swig_includes = [],
        deps = [],
        copts = [],
        **kwargs):
    module_name = name.split("/")[-1],
    extra_deps = [],
    _py_wrap_cc(
        name = name + "_py_wrap",
        srcs = srcs,
        module_name = module_name,
        py_module_name = name,
        swig_includes = swig_includes,
        toolchain_deps = ["@bazel_tools//tools/cpp:current_cc_toolchain"],
        deps = deps + extra_deps,
    )

    '''
    tf_cc_shared_object(
        name = cc_library_name,
        srcs = [module_name + ".cc"],
        copts = copts + if_not_windows([
            "-Wno-self-assign",
            "-Wno-sign-compare",
            "-Wno-write-strings",
        ]),
        linkopts = extra_linkopts,
        linkstatic = 1,
        deps = deps + extra_deps,
        **kwargs
    )

    native.genrule(
        name = "gen_" + cc_library_pyd_name,
        srcs = [":" + cc_library_name],
        outs = [cc_library_pyd_name],
        cmd = "cp $< $@",
    )

    native.py_library(
        name = name,
        srcs = [":" + name + ".py"],
        srcs_version = "PY3",
        data = select({
            clean_deps("//tensorflow:windows"): [":" + cc_library_pyd_name],
            "//conditions:default": [":" + cc_library_name],
        }),
    )
    '''
