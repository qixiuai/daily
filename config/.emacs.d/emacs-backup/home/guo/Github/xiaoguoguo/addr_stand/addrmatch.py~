#!/usr/bin/env python
# coding: utf-8
# /Users/l1480/addr_stand

import readcsv
import addrsample
import addrdivision
import addrpreprocess 
import addrprocess
import addrtree
import time
import writecsv
import datapreprocess

import pdb

# minRecord = 1, maxRecord = 300
def addrmatch(detail_addr, addrTree):
    '''
    将地址加入到生成的地址树中
    
    Args: 
        detail_addr: [['DL_521311151631340002',['浙江省', 1],['衢州市', 2],['江山市新塘边镇', 4],
                     ['警务区', 6.3],['新塘边镇下社坂18号周杰灯具店', 99]],[]...]
        addrTree: 创建的一个地址树
    Return: 
        addrTree: 返回一个地址树
        leafNode: 所有叶子节点
    '''
    lvs = addrsample.lvs
    detail_addr = datapreprocess.addrs_replace(detail_addr)
    print('data preprocess')
    addrs = addrdivision.cut_all_addr_with_no(detail_addr, lvs)
    print('addr cut')
    addrs = addrpreprocess.addr_preprocess_with_no(addrs)
    print('addr preprocess')
    #addrs = addrpreprocess.preprocess(addrs,CONFIG)
    addrTree, leafNodes = addrprocess.add_addrs_to_tree_with_no(addrTree, addrs)
    return addrTree, leafNodes
# 上面的leafNode的作用：当两个地址通过地址树后生成的叶子节点相同时，则表明地址匹配成功，两地址为同一个地址
# return两个值，是以列表的形式返回的


def trans_nodes_to_lv10(addrTree, matchNodes):
    '''
    返回所有 10 级节点，若是99级，则查询父节点，若父节点为10级则返回
    
    Args:
        addrTree: 创建的地址树
        matchNodes: 电力地址和派出所地址匹配成功的TreeNodes类节点列表
        
    Returns:
        nodes_10s: 10级节点的信息
        lv99Nodes: 99级节点的信息，并且父节点不为10级
    '''
    nodes_10s = {}
    num1 = 0
    num2 = 0
    num0 = 0
    lv99Nodes = []
    for matchNode in matchNodes:
#        matchNode = [addrID, [nodeID, lv]]
        nodes_10 = None
        if matchNode[1][1] == 10:
            num0 += 1
#            nodes_10 = [addrID, nodeID]
            nodes_10 = [matchNode[0],matchNode[1][0]]
#            print('nodes_1010=%s'%nodes_10)
        # 另一种：'if addrTree.nodes[matchKey].lv == 99:'
        if matchNode[1][1] == 99:
            num1 += 1
            matchKey = matchNode[1][0]
            parent = addrTree.nodes[matchKey].parentID
            if addrTree.nodes[parent].level == 10:
#                print('T')
                num2 += 1
                nodes_10 = [matchNode[0],parent]
#                nodes_10s.append(parent)
#                print('nodes_1099=%s'%nodes_10)
            else:
                k = matchNode[1][0]
#                lv99Nodes = [addrID, nodeID, nodeName, parentID, parentName]
                lv99Nodes.append([matchNode[0],k,addrTree.index[k],parent,addrTree.index[parent]])
        if nodes_10 != None:
#            if nodes_10[1] in nodes_10s.keys():
            if nodes_10s.get(nodes_10[1]) != None:
#                nodes_10s= {nodeID : [addrID, ...]}
                nodes_10s[nodes_10[1]].append(nodes_10[0])
            else:
                temp = []
                temp.append(nodes_10[0])
                nodes_10s[nodes_10[1]] = temp
                
#            nodes_10s = {nodeID: [addrID1, addrID2, ...]}
#            print('666:%s'%nodes_10s)
    print('lv10:%d, lv99:%d, trans:%d' %(num0,num1,num2))
    return(nodes_10s, lv99Nodes)
    

#    返回所有10级父节点（不一定是9级）
def search_parent(addrTree, nodes_10s):
    '''
    返回所有10级父节点（不一定是9级）
    
    Args:
        addrTree: 生成的树
        nodes_10s: 所有10级节点
        
    Return:
        nodes_9s: 所有10级父节点
    '''
    nodes_9s = {}
    for k in nodes_10s.keys():
        parent = addrTree.nodes[k].parentID
        name = addrTree.index[parent]
        Lv = addrTree.nodes[parent].level
        nodes_9s[k] = [parent, name, Lv]
    return(nodes_9s)

#    返回 10 级节点的父节点并且去重，然后返回他们的子节点
def get_parent_children(addrTree, nodes_10s):
    nodes_9s = {}
    parentSet = set()
    for k in nodes_10s.keys():
        parent = addrTree.nodes[k].parentID
        parentSet.add(parent)
    for p in parentSet:
        for child in addrTree.nodes[p].childrenList.keys():
            name = addrTree.index[child]
            lv = addrTree.nodes[child].level
            nodes_9s[p] = [child, name, lv]
    return(nodes_9s)


def get_all_children_with_lv(addrTree, lv):
    '''返回地址树中所有级别为 lv 节点的子节点
    '''
    res = []
    for k in addrTree.index.keys():
        if addrTree.nodes[k].level == lv:
#            if addrTree.nodes[k].childrenList != None and len(addrTree.nodes[k].childrenList.keys()) > 1:
            children = addrTree.nodes[k].childrenList
            if len(children.keys()) > 1:
                name = addrTree.index[k]
                print('%d:%s: %s' %(k, name, children))
                res.append([k, name, children[k]])
    return(res)

def get_children(addrTree, nodeIndex):
    '''获取节点的孩子节点
    '''
    res = []
    children = addrTree.nodes[nodeIndex].childrenList
    for k in children.keys():
        lv = addrTree.nodes[k].level
        name = addrTree.index[k]
        temp = [k, name, lv]
        res.append(temp)
        print('%d:%d:%d %s' %(k,children[k],lv,name))
    return(res)

def get_parent(addrTree, nodeIndex):
    '''获得节点的父节点
    '''
    parent = addrTree.nodes[nodeIndex].parentID
    print('%d : %s' %(parent, addrTree.index[parent]))
    return(parent)

def funf(addrTree, index, num):
    for i in index:
        if i < num:
            print('%d:%s' %(i, addrTree.index[i]))
            

def get_lv99(nodes, lv):
    '''
    返回在给定node集合中所有的指定lv的节点
    '''
    res = []
    for node in nodes:
        if node[2] == lv:
            print(node)
            res.append(node)
    return(res)
    
def get_lv99_from_tree(addrTree, lv):
    res = []
    for index in addrTree.index.keys():
        if addrTree.nodes[index].level == lv:
            res.append([index, addrTree.nodes[index].level, addrTree.index[index]])
    return(res)
    
if __name__== '__main__':
    path1 = '/home/guo/Github/xiaoguoguo/addrsdata/dl_dz2_no_quotes.csv'
    path2 = '/home/guo/Github/xiaoguoguo/addrsdata/pcsmk_dz2_no_quotes.csv'
    writePath = '/home/guo/Github/xiaoguoguo/addrsdata/result_after_datapre.csv'
    t1 = time.time()
    detail_addr1 = readcsv.read_csv(path1,encoding='GBK', idMark = 'DL' minRecord=0, maxRecord=220000)
    detail_addr2 = readcsv.read_csv(path2, encoding='UTF-8',idMark = 'PCS', minRecord=0, maxRecord=1000000)
    #pdb.set_trace()
    print('file load')
    print('dl = %d' % len(detail_addr1))
    print('pcs = %d' % len(detail_addr2))
    addrTree = addrtree.AddrTree()
    #pdb.set_trace()
    addrTree, leafNodes = addrmatch(detail_addr1, addrTree)
    matchNodes = leafNodes
    #pdb.set_trace()
    addrTree, leafNodes = addrmatch(detail_addr2, addrTree)
    matchNodes += leafNodes
    #pdb.set_trace()
    nodes_10s,lv99Nodes = trans_nodes_to_lv10(addrTree, matchNodes)
    #pdb.set_trace()
    writecsv.write_csv(nodes_10s, writePath, "DL", "PCS")
    print('result write')
    t2 = time.time()
    print('total time = %s' %(t2-t1))

