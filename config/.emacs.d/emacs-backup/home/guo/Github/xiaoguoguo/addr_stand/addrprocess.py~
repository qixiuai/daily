# -*- coding: utf-8 -*-
"""
Created on Mon Nov 26 10:01:33 2018

@author: kongyu
"""

#import jieba
import addrtree
import numpy as np
#import cpca
import addrdivision
import addrsample
import readcsv
import addrpreprocess
import datetime

LEVEL_NUM = 8
LEVEL_START = 1
COUNT = 10000
DEBUG = True

# unrecode
def add_addr_to_tree(addrTree, addr):
    parentID = None
    for addr_unit in addr:
        #print(addr_unit)
#       addr_unit:[name, level] 示例：['龙岗区', 3]
        if addr_unit[1] > 3:
            parentID = addrTree.find_loc(parentID, addr_unit)
        node = addrtree.TreeNode(addr_unit[0],addr_unit[1],parentID)
        parentID = addr_unit[0]
        node.print_node()
        addrTree.add_node(node)
    return(addrTree)

def gen_tree(addrs):
    addrTree = addrtree.AddrTree()
    error = False
    for addr in addrs:
        preUnit = None
        for addr_item in addr:
            nodeIndex = addrTree.add_node(addr_item, preUnit)
            if nodeIndex == False:
                error = True
                break
            preUnit = [nodeIndex, addr_item[1]]
        if error == True:
            print('there is an error!')
            break
    return(addrTree)
    
def gen_tree_with_no(addrs):
    addrTree = addrtree.AddrTree()
    error = False
    for addr in addrs:
        preUnit = None
        for addr_item in addr:
            nodeIndex = addrTree.add_node(addr_item, preUnit)
            if nodeIndex == False:
                error = True
                break
            preUnit = [nodeIndex, addr_item[1]]
        if error == True:
            print('there is an error!')
            break
    return(addrTree)
    
def add_addrs_to_tree(addrTree, addrs):
    error = False
    for addr in addrs:
        preUnit = None
        for addr_item in addr:
            nodeIndex = addrTree.add_node(addr_item, preUnit)
            if nodeIndex == False:
                error = True
                break
            preUnit = [nodeIndex, addr_item[1]]
        if error == True:
            print('there is an error!')
            break
    return(addrTree)
    
def add_addrs_to_tree_with_no(addrTree, addrs):
    num = 0
    error = False
    leafNode = []
    num_addrs_with_except = 0
    for addr in addrs:
        preUnit = None
        addr_no = addr[0]
        addr = addr[1:]
        for addr_item in addr:
            nodeIndex = False
            try:
                nodeIndex = addrTree.add_node(addr_item, preUnit)
            except:
                num_addrs_with_except += 1
                print("Total num addrs with exception:{}".format(num_addrs_with_except), flush=True)
                break
            if nodeIndex == False:
                error = True
                break
            '''
            TODO: 目前preUnit没有包含 lvLen，add_node里面只用到了 preUnit[0]
            '''
            preUnit = [nodeIndex, addr_item[1]]
        if error == True:
            print('there is an error!')
            break
        leafNode.append([addr_no, preUnit])
        if DEBUG:
            num += 1
            if num % COUNT == 0:
                time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                print('%s num = %d, addr_no = %s' %(time, num, addr_no))
    return(addrTree, leafNode)
    

if __name__ == '__main__':
    PATH = r'/Users/l1480/Desktop/dl_dz2_no_quotes.csv'
    encoding = 'GBK'
    detail_addr = readcsv.read_csv(PATH, encoding ,'DL',0,50)
#    detail_addr = addrsample.detail_addr
    '''
    PATH = 'D:\地址标准化\dl_dz.csv'
    encoding = 'GBK'
    detail_addr = readcsv.readcsv(PATH, encoding, maxRecord= 10000)
    '''
    lvs = addrsample.lvs
    addrs = addrdivision.cut_all_addr_with_no(detail_addr, lvs)
    addrs, delete = addrpreprocess.data_clean_with_no(addrs)
    
#    print(addrs)
    '''
    addrTree = addrtree.AddrTree()
    addrTree, matchNode = add_addrs_to_tree_with_no(addrTree, addrs)
    print('AddrTree:')
    addrTree.print_all_nodes()
    print('matchNode = %s' % matchNode)
#    addrTree.print_all_nodes()
    '''
    '''
    for addr in addrs:
        print(addr)
    '''
    
'''    
    nodes = []
    levels = np.zeros(len(alist))
    

    # 遍历所有地址单元
    for i in range(len(alist)):
        # 如果当前地址单元已经存在于地址树中
        if addrTree.get_node(alist[i]) is not None:
            # 取出地址树中匹配的节点，把它放入nodes中持有，并把它的level放入levels持有
            node = addrTree.get_node(alist[i])
            print('name:%s, level:%d' %(node.name, node.level))
            nodes.append(node)
            levels[i] = node.level
        else:
            nodes.append(alist[i])
            print('name: None')
    #addrTree.all_nodes()
'''