#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Dec 12 18:49:07 2018

@author: l1480
"""

#config:配置
CONFIG = {'huzhen':True,'xingzhengcun':True,'distrBegin':True}
DISTRICTION = ['柯城区','衢江区','开化县','龙游县','常山县']

#addr1= [['湖镇', 4], ['镇下潘行政村', 5]]

def addr_preprocess_with_no(addrs,config):
    '''
    将切分后的地址进行预处理
    eg: addrs = ['DL_521311151631340002',['浙江省', 1],['衢州市', 2],['江山市新塘边镇', 4],
                          ['警务区', 6.3],['新塘边镇下社坂18号周杰灯具店', 99]]
    
    Args:
        addrs: 被所有级别切分后的所有地址
        
    Returns: 
        addrs: 预处理之后的addrs
    '''
    addrs = preprocess_with_no(addrs)
    addrs, _a, _b = data_clean_with_no(addrs)
    deal_with_lv99(addrs)
    return(addrs)
    
# unrecord
def dataclean(addrs):
    temp = []
    delete = []
    for addr in addrs:
        # 将addrs中的一个addr拿出来进行if判断(在判断里addr不变)
        # 之所以加rm_mark = False是这样可以将一下几种if变成一个or的关系
        # 不用'if ** or **:'这种形式原因：*.append();*.remove()他们之间是互相独立的
        rm_mark = False
        if addr[0][1]>3:
            temp.append(addr)
            rm_mark = True
        if addr[-1][1]<10:
            delete.append(addr)
            rm_mark = True
        if rm_mark == True:
            addrs.remove(addr)
        
    return(addrs, temp)
'''
错误代码：
def dataclean(addrs):
    temp = []
    delete = []
    for addr in addrs:
        if addr[0][1]>3:
            temp.append(addr)
            addrs.remove(addr)
        if addr[-1][1]<10:
            delete.append(addr)
            addrs.remove(addr)
    return(addrs, temp)

因为有的addr可能两个if条件均符合，但在第一个if中已经被remove了，所以在第二次发现符合if时实际上addrs里
已经不存在这个拿出来的addr了，因此会报错
'''

def deal_with_lv99(addrs):
    '''
    将地址被切分后的第99级地址块（前一级不为10）中的
    （1）'**-**-**'转化为'**幢**单元**室'
    （2）'**-**'转化为'**单元**室'

    '''
    for addr in addrs:
        if addr[-1][1] == 99 and addr[-2][1] != 10:
            addr[-1][0] = addr[-1][0].split('-')
            if len(addr[-1][0]) == 1:
                pass
#               print('+++++++++%s' %addr[-1])               
            if len(addr[-1][0]) == 2:
                a = addr[-1][0][0] + '单元'
                b = addr[-1][0][1] + '室'
                del addr[-1]
                addr.append([a,8,2])
                addr.append([b,10,1])
                
            if len(addr[-1][0]) == 3:
                a = addr[-1][0][0] + '幢'
#                print('a = %s' %a)
                b = addr[-1][0][1] + '单元'
                c = addr[-1][0][2] + '室'
                del addr[-1]
                addr.append([a,7,1])
                addr.append([b,8,2])
                addr.append([c,10,1])
#    return(addrs)


def data_clean_with_no(addrs):
    '''
    将最大切分级别小于10的地址删除
    
    Args: 
        addrs: 被所有级别切分后的所有地址
    
    Returns:
        generate_addr: 剩下的地址组成的列表
        temp: 不是以'浙江省'开头的地址组成的列表
        delete: 被删除的最大级别小于10的地址组成的列表
    '''
    temp = []
    delete = []
    generate_addr = []
    for addr in addrs:
#        print('addr=%s' %addr)
        rm_mark = False
        if addr[1][1] != 1:
#            print(addr)
            temp.append(addr)
            rm_mark = True
#        print('addr1=%s' %addr)   
        if addr[-1][1] < 10:
            delete.append(addr)
            rm_mark = True
        if rm_mark != True:
            generate_addr.append(addr)
    return(generate_addr, temp, delete)
    
    
# unrecord   
def addrpreprocess(addr):
    #addr = [['湖镇',4],['镇下潘行政村',5]]
    #addr = [['柯城区', 3], ['某街道', 4], ['某社区', 4.1]]
    # [huzhen,xingzhengcun]
    config = CONFIG
    
    addr = preprocess(addr, config)
    return(addr)

# unrecord  
def preprocess(addr, config):
    mark = False
    mark2 = False

    for item in addr:
#       for循环中的item是['湖镇',4]，所以item[0]是'湖镇' 
        if config['huzhen'] == True:
            if mark == True:
                item[0] = item[0][1:]
                print(item[0])
                mark = False
            if item[0] == '湖镇':
                mark = True
#            item[1][0] == item[1][0][1:]
#            if item[0][0] == '湖镇' and item[0][1] == 4:
#                config['huzhen']== True
#    return(addr)
        #if config[''] == True:
            #pass
#    print('config = %s' %config)
    if config['distrBegin'] == True:
        for temp in DISTRICTION:
            #print('temp = %s' %temp)
            if mark2 == True:
                addr.insert(0,['衢州市',2])
                #print('addr1 = %s' %addr)
                addr.insert(0,['浙江省',1])
                #print('addr2 = %s' %addr)
                mark2 = False
            if addr[0][0] == temp:
                mark2 = True
            if addr[0][0] == '江省':
                addr[0][0] = '浙江省'
    return(addr)


  
def preprocess_with_no(addr, config = CONFIG):
    '''
    （1）’湖镇镇‘改为’湖镇‘
    （2）’江省‘改为’浙江省‘
    （3）从第三级开始的地址补全第二、第一级
     
    Args:
        addr: 单个被所有级别切分后的地址
        config: 配置开关
    
    Returns:
        addr: 预处理后的一个地址
    '''
    mark = False

    for item in addr:
        if config['huzhen'] == True:
            # 加mark是因为要对下一条处理，作为一个开关用
            # 如果对于当前temp处理是不用加mark
            if mark == True:
                item[2][0] = item[2][0][1:]
                print(item[2][0])
                mark = False
            if item[1][0] == '湖镇':
                mark = True
#    print('config = %s' %config)
       
    if config['distrBegin'] == True:
        for temp in DISTRICTION:
            if addr[1][0] == temp:
                addr.insert(1,['衢州市',2])
                addr.insert(1,['浙江省',1])
                
            if addr[1][0] == '江省':
                addr[1][0] == '浙江省'
            
            if addr[1][0] == '衢州市':
                addr.insert(1,['浙江省',1])
                
            if addr[1][0] == '浙江省':
                pass 
            
            if addr[1][0] != '浙江省':
                del addr             
    return(addr)


if __name__ == '__main__':
    addrs = data_clean_with_no(addrs)
    addrs = addr_preprocess_with_no(addrs,config = CONFIG)
    print(addrs)
    
