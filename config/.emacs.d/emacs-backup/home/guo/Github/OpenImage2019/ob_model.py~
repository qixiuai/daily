
import tensorflow as tf


def create_model(params, is_train):
    with tf.name_scope("model"):
        if is_train:
            inputs = tf.keras.layers.Input((None,), dtype="float32", name="inputs")
            targets = tf.keras.layers.Input((None,), dtype="float32", name="targets")
            internal_model = FasterRCNN(params, is_train)
            logits = internal_model([inputs, targets], training=is_train)
            label_smoothing = params["label_smoothing"]
            if params["enable_metrics_in_training"]:
                pass
            model = tf.keras.Model([inputs, targets], logits)
            loss = tf.keras.losses.SparseCategoricalCrossentropy()
            model.add_loss(loss(targets, logits))
            return model
        else:
            pass
        

class FasterRCNN(tf.keras.Model):

    def __init__(self, params, name=None):
        self.params = params

    def get_config(self):
        return {"params": self.params}

    def call(self, inputs, training):
        pass

    def predict(self):
        pass

    def eval(self):
        pass
