
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import tensorflow as tf

from tensorflow.keras.models import load_model
from sklearn.metrics import confusion_matrix

from dataset import IsrucDataset
from model import get_experiment_model
from model import ConvBlocks
import pdb

model = get_experiment_model()

#model = load_model("ckpts/model.532-0.77.hdf5",
#                 custom_objects={'ConvBlocks': ConvBlocks})
model.load_weights("ckpts/model.532-0.77.hdf5")
model.compile(loss="categorical_crossentropy",
              optimizer="adam",
              metrics=['accuracy'])

isruc_test = IsrucDataset(train=False)
dataset_test = tf.data.Dataset.from_generator(isruc_test, (tf.float32, tf.int64))
batch_size = 2048
dataset_test = dataset_test.shuffle(buffer_size=batch_size).batch(batch_size)
acc = 0
count = 0
for (X, y) in dataset_test:
    loss, batch_acc = model.evaluate(X, y)
    acc += batch_acc
    count += 1
    mean_acc = acc / count
    print("mean_acc: {} acc_batch: {}".format(mean_acc, batch_acc))
    y_prob = model.predict(X)
    y_pred = np.argmax(y_prob, axis=1)
    pdb.set_trace()
    mat = confusion_matrix(y, y_pred)
    print(mat)
    break





