
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function


import tensorflow as tf

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Layer

from tensorflow.keras.layers import Input, Dense, Conv1D, MaxPooling1D
from tensorflow.keras.layers import BatchNormalization, Dropout, Flatten
from tensorflow.keras.layers import Concatenate


class ConvBlock(Layer):
    """ ConvBlock in Duke CNN paper """

    def __init__(self):
        super(ConvBlock, self).__init__()
        self.conv1d_1 = Conv1D(filters=10, kernel_size=8, strides=1, padding="same", activation="relu")
        self.conv1d_2 = Conv1D(filters=10, kernel_size=8, strides=2, padding="same", activation="relu")
        
    def call(self, inputs):
        x = self.conv1d_1(inputs)
        x = self.conv1d_2(x)
        return x

def residual_block(inputs, filters, strides):
    pass
    

class ConvBlocks(Layer):

    def __init__(self):
        super(ConvBlocks, self).__init__()
        self.conv_blocks = [ConvBlock() for i in range(5)]

    def call(self, inputs):
        for i in range(5):
            inputs = self.conv_blocks[i](inputs)
        return inputs


def get_deepsleepnet():
    inputs = Input(shape=(1200, 1))
    x = BatchNormalization()(inputs)
    
    

def get_model_DukeCNN():
    inputs = Input(shape=(1200, 1))
    x = ConvBlocks()(inputs)
    x = Flatten()(x)
    x = Dropout(0.5)(x)
    x = Dense(units=20, activation="relu")(x)
    #x = Dense(units=20, activation="relu")(x)
    x = Dropout(0.5)(x)
    outputs = Dense(units=1, activation="sigmoid")(x)
    return Model(inputs, outputs)




def get_standard_DukeCNN():
    inputs = Input(shape=(120, 1))
    x = ConvBlocks()(inputs)
    x = Flatten()(x)
    x = Dropout(0.5)(x)
    x = Dense(units=20, activation="relu")(x)
    x = Dropout(0.5)(x)
    x = Dense(units=20, activation="relu")(x)
    x = Dropout(0.5)(x)
    outputs = Dense(units=3, activation="softmax")(x)
    return Model(inputs, outputs)

class DukeCNN(object):

    def __init__(self):
        self.conv_blocks = ConvBlocks()
        self.dense_1 = Dense(units=20, activation="relu")
        self.dense_2 = Dense(units=20, activation="relu")
        self.dropout = Dropout(0.5)
        self.sigmoid = Dense(units=1, activation="sigmoid")
        self.flatten = Flatten()
        
    def __call__(self):
        inputs = Input(shape=(1200, 1))
        x = inputs
        x = self.conv_blocks(x)
        x = self.flatten(x)
        x = self.dense_1(x)
        #x = self.dense_2(x)
        x = self.dropout(x)
        outputs = self.sigmoid(x)
        return Model(inputs, outputs)








