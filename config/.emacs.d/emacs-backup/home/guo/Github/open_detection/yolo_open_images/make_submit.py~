
import os
import sys
import cv2
import pdb
import numpy as np
import pandas as pd
from tqdm import tqdm
from glob import glob

sys.path.insert(0,"/home/guo/OpenImage2019")

from encoder import NameEncoder

encoder = NameEncoder()

result_dir = "results_open_images/"
results = glob(result_dir + "*.txt")

data_dir = "/home/guo/data/kaggle/OpenImage2019/test/"

data = {} # ImageId : PredictionString
cache_image_shapes = {} # image_id : shape

for result in tqdm(results):
    class_name = os.path.basename(result)[15:-4]
    try:
        bin_name = encoder.encode(class_name)
    except KeyError:
        print(result+" not found in class name dict")
        continue
    with open(result) as file:
        for line in file:
            pred = line.strip().split(" ")
            image_id, confidence, xmin, ymin, xmax, ymax = pred
            xmin = float(xmin)
            ymin = float(ymin)
            xmax = float(xmax)
            ymax = float(ymax)
            pred[0] = bin_name
            if image_id not in cache_image_shapes.keys():
                image = cv2.imread(data_dir + image_id+".jpg")
                h, w, _ = image.shape
                cache_image_shapes[image_id] = (h, w)
            h, w = cache_image_shapes[image_id]
            xmin = xmin / w
            xmax = xmax / w
            ymin = ymin / h
            ymax = ymax / h
            pred[2] = str(xmin)
            pred[3] = str(ymin)
            pred[4] = str(xmax)
            pred[5] = str(ymax)
            if image_id in data.keys():
                pred_str = data[image_id] + " "
            else:
                pred_str = ""
            pred_str += " ".join(pred)
            data[image_id] = pred_str

# add missing image_id
sample_submit_path= "/home/guo/data/kaggle/OpenImage2019/sample_submission.csv"
df = pd.read_csv(sample_submit_path)
for image_id in list(df["ImageId"]):
    if image_id not in data.keys():
        data[image_id] = ""

with open("submit_yolo_spp.csv", 'w') as out:
    out.write("ImageID,PredictionString\n")
    for image_id, pred_str in data.items():
        out.write(image_id+","+pred_str+"\n")








