
from concurrent import futures
import time

from mne import Epochs, pick_types
from mne.io import concatenate_raws, read_raw_edf

import grpc

import psg_pb2
import psg_pb2_grpc

from absl import app
from absl import flags

import algorithm

import pdb

_ONE_DAY_IN_SECONDS = 60 * 60 * 24

class PSGService(psg_pb2_grpc.PSGServiceServicer):

    def EdfAnalysis(self, requests, context):
        raw = b''
        for request in requests:
            raw += request.data
        algorithm.analysis(raw)
        return psg_pb2.SummaryReply(example="Received Edf data size: {}M".format(len(raw)/1024/1024))


def serve(unused):
    del unused
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    psg_pb2_grpc.add_PSGServiceServicer_to_server(PSGService(), server)
    server.add_insecure_port('[::]:6066')
    server.start()
    try:
        while True:
            time.sleep(_ONE_DAY_IN_SECONDS)
    except KeyboardInterrupt:
        server.stop(0)
        
if __name__ == '__main__':
    app.run(serve)
