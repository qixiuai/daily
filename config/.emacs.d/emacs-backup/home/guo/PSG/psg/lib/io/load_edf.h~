#ifndef _PSG_LIB_IO_LOAD_EDF_
#define _PSG_LIB_IO_LOAD_EDF_

#include <iostream>
#include <iomanip>
#include <string>
#include <memory>
#include <chrono>
#include <ctime>
#include <sstream>
#include <cstdlib>
#include "edflib.h"

namespace physio {
  namespace io {
    
    class EdfplusReader {
    public:
      EdfplusReader() = default;
      EdfplusReader(const std::string& filepath);
      std::vector<float> load_signal(std::string signal_name);
      std::vector<std::vector<float>> get_epoch(std::chrono::system_clock::time_point timepoint_epoch);
  
      std::chrono::system_clock::time_point start_time;
      std::string patient;
      std::vector<int> freqs;
      std::vector<std::string> signal_names;
      std::vector<std::vector<float>> signals;
      ~EdfplusReader() { delete hdr;}
    private:
      std::vector<float> get_epoch_for_signal(std::string signal_name,
					      std::chrono::system_clock::time_point time_epoch);
      std::pair<int, int> calc_indexes(std::chrono::system_clock::time_point time_of_epoch, int freq);
      int get_signal_index(std::string signal_name);
  
      struct edf_hdr_struct* hdr;  
    };
  } // end namespace io

} // end namespace physio

#endif

