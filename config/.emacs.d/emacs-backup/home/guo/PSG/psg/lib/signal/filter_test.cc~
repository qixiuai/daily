
#include <fstream>
#include <iostream>
#include <vector>
#include <string>

#include "spdlog/spdlog.h"
#include "filter.h"

std::vector<int> load_signal(std::string filepath, int size) {
  std::vector<int> data;
  std::ifstream in(filepath);
  if (!in.is_open()) {
    spdlog::error("file {} not found!", filepath);
  }
  string line;
  vector<int> signal;
  int i = 0;
  while (getline(in, line)) {
    int value = std::stoi(line);
    signal.push_back(value);
    if (i++ >= size) break;
  }
  return signal;
}

int main() {
  using namespace std;
  spdlog::info("filter test starts");
  const string project_dir = "/home/guo/PSG/";
  const string data_dir = "/home/guo/PSG/data/stage/";
  const string c4_file_name = "c4_a1.txt"; // 500Hz

  const string eeg_filepath = data_dir  + c4_file_name;
  
  int eeg_size = 30*500;
  vector<int> eeg_signal = load_signal(eeg_filepath, eeg_size);
  const string coeffs_dir = project_dir + "psg/stage/cc/coeffs/";
  const string b_path = coeffs_dir + "EEG_bandpass_b.csv";
  physio::signal::LinearFilter eeg_filter(b_path);
  vector<float> signal_bp;
  for (auto val : eeg_signal) {
    val_bp = eeg_filter.filter(val);
    signal_bp.push_back(val_bp);
  }
  
  spdlog::info("filter test finished!");
  
  return 0;
}
