#ifndef _PHYSIO_PSG_MAIN
#define _PHYSIO_PSG_MAIN

#include <assert.h>
#include <queue>
#include <iostream>
#include <future>

#include "third_party/zeromq/zmq.h"
#include "boost/circular_buffer.h"

namespace physio {
  template <class T>
  using Buffer = boost::circular_buffer<T>;
  
  class PSG {
  public:
    PSG();
    int push_back_light(int light);
    int push_back_ecg(int ecg_la_ra);
    int push_back_eeg(int eeg_f1_m2, int eeg_c3_m2, int eeg_c4_m1,
		      int eeg_f2_m1, int eeg_o1_m2, int eeg_o2_m1);
    int push_back_emg(int emg_pos_neg);
    int push_back_eog(int eog_e2_m2, int eog_e1_m2);
    int push_back_leg(int leg_l, int leg_r);
    int push_back_resp(int resp_abdomen, int resp_chest,
		       int resp_pressure, int resp_thermal);
    int push_back_sao2(int sao2_finger);
    int push_back_trachea(int trachea_sound);

  private:
    using ChannelQueue = std::queue<float, std::vector<float>>;
    static ChannelQueue light;
    static ChannelQueue ecg;
    static ChannelQueue eeg_f1_m2;
    static ChannelQueue eeg_f2_m1;
    static ChannelQueue eeg_c3_m2;
    static ChannelQueue eeg_c4_m1;
    static ChannelQueue eeg_o1_m2;
    static ChannelQueue eeg_o2_m1;
    static ChannelQueue emg;
    static ChannelQueue eog_e1_m2;
    static ChannelQueue eog_e2_m2;
    static ChannelQueue leg_l;
    static ChannelQueue leg_l;
    
    static void _start_stage_server();
    int light_fz = 1;
    int ecg_fz = 500;
    int eeg_fz = 500;
    int emg_fz = 500;
    int eog_fz = 500;
    int leg_fz = 1;
    int resp_fz = 100;
    int sao2_fz = 1;
    int trachea_fz = 500;
  };
  PSG::PSG() {
    std::cout << "start psg" << std::endl;
    std::future<void>
      stage_server(std::async(std::launch::async, _start_stage_server));
    std::cout << "hello world" << std::endl;
  }
  void PSG::_start_stage_server() {
    void *context = zmq_ctx_new();
    void *stage_server = zmq_socket(context, ZMQ_REP);
    int rc = zmq_bind(stage_server, "tcp://*:6660");
    assert(rc == 0);
    while (true) {
      char stage_recive_buffer[300];
      zmq_recv(stage_server, stage_recive_buffer, 300, 0);
      char stage_reply_buffer[300];
      zmq_send(stage_server, stage_reply_buffer, 300, 0);
    }    
  }  
} // end namespace physio



#endif
