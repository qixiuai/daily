
#include "tensorflow/restapi/server.h"

DataServer::DataServer() {}

DataServer::DataServer(utility::string_t url): m_listener(url) {
  m_listener.support(methods::GET,  std::bind(&DataServer::handle_get,    this, std::placeholders::_1));
  m_listener.support(methods::PUT, std::bind(&DataServer::handle_put,   this, std::placeholders::_1));
  m_listener.support(methods::POST, std::bind(&DataServer::handle_post,   this, std::placeholders::_1));
  m_listener.support(methods::DEL,  std::bind(&DataServer::handle_delete, this, std::placeholders::_1));
}

DataServer::~DataServer() {
  // release resources
}

void DataServer::handle_error(pplx::task<void>& t) {
  try {
    t.get();
  }
  catch(...) {
    fprintf(stderr, "from handle error\n");
  }
}

void DataServer::handle_get(http_request message) {
  ucout << message.to_string() << endl;
  message.reply(status_codes::OK, message.to_string());
  return;
}

void DataServer::handle_put(http_request message) {
  ucout << message.to_string() << endl;

  message.extract_vector().then([](std::vector<unsigned char> data) {
      ucout << "Enter extract vector" << endl;
      ucout << "data size: " << data.size() << '\n';
    });

  message.reply(status_codes::OK, message.to_string());
  return;  
}

void DataServer::handle_post(http_request message) {
  ucout << message.to_string() << endl;

  message.extract_json().then([=](json::value data) {
      ucout << "Enter extract json" << endl;
      ucout << data["Key"] << endl;
    });
  
  message.reply(status_codes::OK, message.to_string());
  return;
}

void DataServer::handle_delete(http_request message) {
  ucout << message.to_string() << endl;
  message.reply(status_codes::OK, message.to_string());
  return;
}

