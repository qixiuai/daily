

#include "psg/ops/edfplus.h"
#include "gtest/gtest.h"

#include <iostream>
#include <fstream>
#include <memory>
#include <vector>
#include <string>

class EdfPlusTest : public testing::Test {

protected:

  void SetUp() override {
    std::string edf_path = "/home/guo/gitlab/IsOnUse/data/A001_1811280035.edf";

    std::streampos file_size;
    std::ifstream file(edf_path, std::ios::binary);
    file.seekg(0, std::ios::end);
    file_size = file.tellg();
    file.seekg(0, std::ios::beg);
    
    raw.resize(file_size);
    file.read(&raw[0], file_size);
    parser = std::make_shared<EdfPlus>(EdfPlus(raw));
  }

  void TearDown() override {
    raw.clear();
  }
  
  std::vector<char> raw;
  std::shared_ptr<EdfPlus> parser;
};

/*
TEST_F(EdfPlusTest, ParseTime) {
  EXPECT_EQ(parser->getStartTime().year, 18)  << "year wrong";
  EXPECT_EQ(parser->getStartTime().month, 11)   << "month wrong";
  EXPECT_EQ(parser->getStartTime().day, 28)     << "month wrong";
  EXPECT_EQ(parser->getStartTime().hour, 0)     << "hour wrong";
  EXPECT_EQ(parser->getStartTime().miniute, 35) << "miniute wrong";
  EXPECT_EQ(parser->getStartTime().second, 6)   << "second wrong";
}

TEST_F(EdfPlusTest, NumSignals) {
 EXPECT_EQ(parser->getNumSignals(), 22);
}

TEST_F(EdfPlusTest, SignalNames) {
 
  std::vector<std::string> truth =
    {"SpO2 finger", "PRate finger", "Event light", "Event pose", "Event BAction",
     "Resp chest", "Resp abdomen", "Events leg-R", "Events leg-L", "Resp temp",
     "Resp pressure", "EOG E2-M2", "EOG E1-M2", "EEG F3-M2", "EEG C3-M2", "EEG O1-M2",
     "EEG F4-M1", "EEG C4-M1", "EEG O2-M1", "ECG LL-RA", "EMG+ - EMG-", "Sound trachea"};
  
  EXPECT_EQ(parser->getSignalNames(), truth);
}

TEST_F(EdfPlusTest, SignalFreqs) {
  std::vector<int> truth = {
    1,1,1,1,1,100,100,100,100,100,100,500,500,500,500,500,500,500,500,500,500,500};

  EXPECT_EQ(parser->getSignalFreqs(), truth);
}

*/

TEST_F(EdfPlusTest, Signals) {
  auto signals = parser->getSignals();
  std::cout << parser->getSignalNames()[5] << std::endl;
  
  
  std::vector<int> truth_spo2_10  = {98, 98, 98, 98, 98, 98, 98, 98, 98, 98};
  std::vector<int> truth_spo2_10_last =
    {102, 102, 102, 102, 102, 102, 102, 102, 102, 102};
  std::vector<int> truth_chest_10 = {-19051, -19053, -19057, -19055, -19053, -19052,
				     -19057, -19056, -19045, -19055};
  std::vector<int> get_spo2_10(signals[0].begin(),  signals[0].begin()+10);
  std::vector<int> get_spo2_10_last(signals[0].end()-10,  signals[0].end());
  std::vector<int> get_chest_10(signals[5].begin(), signals[5].begin()+10);
  
  EXPECT_EQ(get_spo2_10,       truth_spo2_10);
  EXPECT_EQ(get_spo2_10_last,  truth_spo2_10_last);
  EXPECT_EQ(get_chest_10,      truth_chest_10);
  
}



int main(int argc, char** argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
