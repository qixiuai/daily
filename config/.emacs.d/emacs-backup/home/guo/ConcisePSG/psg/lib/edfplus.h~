
#ifndef _PSG_OPS_EDFPLUS_
#define _PSG_OPS_EDFPLUS_

#include <iostream>
#include <iterator>
#include <cassert>
#include <unordered_map>
#include <vector>
#include <string>

#include "absl/strings/str_join.h"

class EdfPlus {
public:
  typedef std::unordered_map<std::string, std::vector<int>> NamedSignals;
  
  EdfPlus() = default;
  EdfPlus(std::string filepath);
  EdfPlus(const std::vector<char> raw): raw{raw} {
    this->_parse_data();
  }

  struct Time {
    int year;
    int month;
    int day;
    int hour;
    int miniute;
    int second;

    Time() = default;
    
    Time(int year, int month, int day, int miniute, int second) :
      year{year}, month{month}, day{day},
      hour{hour}, miniute{miniute}, second{second} {}

    // create Time from "28.11.1800.35.06"
    Time(const std::vector<char>& raw_time) {
      // reconstruct code
      assert(raw_time.size() == 16);
      std::string day_str(raw_time.begin(), raw_time.begin()+2);
      std::string month_str(raw_time.begin()+3, raw_time.begin()+5);
      std::string year_str(raw_time.begin()+6, raw_time.begin()+8);
      std::string hour_str(raw_time.begin()+8, raw_time.begin()+10);
      std::string miniute_str(raw_time.begin()+11, raw_time.begin()+13);
      std::string second_str(raw_time.begin()+14, raw_time.begin()+16);
      year    = std::stoi(year_str);
      month   = std::stoi(month_str);
      day     = std::stoi(day_str);
      hour    = std::stoi(hour_str);
      miniute = std::stoi(miniute_str);
      second  = std::stoi(second_str);
      //std::cout << toString() << '\n';
    }
    std::string toString() const {
      std::vector<int> time{year, month, day, hour, miniute, second};
      return absl::StrJoin(time, "-");
    }
  };
  
  Time getStartTime() const { return _starttime; }
  std::vector<std::vector<int>> getSignals() const { return _signals; }
  int getNumSignals() const { return _num_signals; }
  std::vector<std::string> getSignalNames() { return _signal_names; }
  std::vector<int> getSignalFreqs() const { return _signal_freqs; }
  
private:
  void _parse_data();
  void _parse_time();
  void _parse_num_signals();
  void _parse_signal_names();
  void _parse_signal_freqs();
  void _parse_signals();
  
  bool _is_parsed;
  const std::vector<char> raw;

  Time _starttime;
  int _num_signals;
  std::vector<std::string> _signal_names;
  std::vector<int> _signal_freqs;
  std::vector<std::vector<int>> _signals;
};

#endif
