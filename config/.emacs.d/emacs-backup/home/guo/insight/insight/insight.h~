#ifndef TENSORBOARD_LOGGER_H
#define TENSORBOARD_LOGGER_H

#include <fstream>
#include <string>
#include <vector>
#include "insight/protobuf/event.pb.h"
#include "insight/crc.h"

namespace insight {

  using tensorboard::Summary;
  using tensorboard::Event;

 class Insight {
 public:
   explicit Insight(const std::string& log_file) {
     bucket_limits_ = NULL;
     ofs = std::ofstream(log_file,
			 std::ios::out | std::ios::trunc | std::ios::binary);
   }
    ~Insight() {
        if (bucket_limits_ != NULL) {
            delete bucket_limits_;
            bucket_limits_ = NULL;
        }
    }
    int add_scalar(const std::string &tag, int step, float value);
    int add_histogram(const std::string &tag, int step, std::vector<float> &value);

private:
    int generate_default_buckets();
    int add_event(int64_t step, Summary *summary);
    int write(Event &event);

    std::ofstream ofs;
    std::vector<double> *bucket_limits_;
};  // class TensorBoardLogger
#endif  // TENSORBOARD_LOGGER_H

}
