

#include "elegant/core/stage_indices.h"

namespace elegant {
  namespace core {

    int GetsleepOnsetEpochID(const std::vector<int>& stages,
			     int close_light_epoch_id,
			     int thres=2) {
      int num_sleep_epochs = 0;
      int sleep_onset_epoch_id = 0;
      int num_stages = stages.size();
  
      for (int epoch_id = close_light_epoch_id;
	   epoch_id < num_stages;
	   epoch_id++) {
    
	int label = stages[epoch_id];
	if (label == 0) {
	  num_sleep_epochs = 0;
	  continue;
	}
    
	// label is sleep
	if (num_sleep_epochs == 0)
	  sleep_onset_epoch_id = epoch_id;
    
	num_sleep_epochs += 1;
    
	if (num_sleep_epochs >= thres)
	  break;
      }
      return sleep_onset_epoch_id;
    }


    float GetStageDurationInMinutes(const std::vector<int>& stages,
				    int sleep_onset_epoch_id,
				    int open_light_epoch_id,
				    int stage) {
      int num_epochs = 0;
      for(int epoch_id = sleep_onset_epoch_id;
	  epoch_id < open_light_epoch_id;
	  epoch_id++) {
    
	int label = stages[epoch_id];
	if (label == stage)
	  num_epochs += 1;
    
      }
      return num_epochs * 0.5;
    }

    float GetStageLatencyInMinutes(const std::vector<int>& stages,
				   int close_light_epoch_id,
				   int stage) {
      int num_latency_epochs = 0;
      int num_epochs = stages.size();
      for(int epoch_id = close_light_epoch_id;
	  epoch_id < num_epochs;
	  epoch_id++){
    
	int label = stages[epoch_id];
	num_latency_epochs += 1;
	if (label == stage)
	  break;
      }  
      return num_latency_epochs * 0.5;
    }

  }
}
