
#ifndef BURN_POSE_REPORT_H_
#define BURN_POSE_REPORT_H_

#include <map>
#include <string>
#include <vector>

#include "burn/common_type.h"

namespace burn {
  
  class PoseReport {
  public:
    struct Args {
      std::vector<int> stages;
      int sleep_onset_epoch_id;
      
      std::vector<float> pose;
      std::vector<Event> oas;
      std::vector<Event> cas;
      std::vector<Event> mas;
      std::vector<Event> hyps;
      std::vector<Event> reras;
      std::vector<Event> desats;

      Args(std::vector<int> stages,
	   int sleep_onset_epoch_id,
	   std::vector<float> pose,
	   std::vector<Event> oas,
	   std::vector<Event> cas,
	   std::vector<Event> mas,
	   std::vector<Event> hyps,
	   std::vector<Event> reras,
	   std::vector<Event> desats)  {
	this->stages = stages;
	this->sleep_onset_epoch_id = sleep_onset_epoch_id;
	this->pose = pose;
	this->oas = oas;
	this->cas = cas;
	this->mas = mas;
	this->hyps = hyps;
	this->reras = reras;
	this->desats = desats;
      }
    };

    struct Rets {
      std::vector<int> pose_epochs;
      std::map<std::string, float> table;
    };

    PoseReport(Rets* rets, const Args* args): args_{args}, rets_{rets} {}
    void Run();

  private:
    const Args* args_;
    Rets* rets_;
  };


}





#endif
