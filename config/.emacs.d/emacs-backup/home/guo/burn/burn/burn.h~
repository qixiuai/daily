
#include <string>
#include <vector>

#include "burn/lib/edfplus/edfplus.h"


namespace burn {
 
  struct Event {
    int start;
    int end;
    Event(int st, int ed) {
      start = st;
      end = ed;
    }
  };
  
  class Session {
  public:
    struct Args {
      std::vector<unsigned char> edf;
      std::vector<int> stages;
      std::vector<Event> arousal;
      std::vector<Event> desats;
      std::vector<Event> oas;
      std::vector<Event> cas;
      std::vector<Event> mas;
      std::vector<Event> hyps;
      std::vector<Event> plms;
      int open_light_ms;
      int close_light_ms;
    };

    struct Result {
      std::vector<int> stages;
      std::vector<Event> arousal;
      std::vector<Event> desats;
      std::vector<Event> oas;
      std::vector<Event> cas;
      std::vector<Event> mas;
      std::vector<Event> hyps;
      std::vector<Event> plms;
      std::string chart;
      std::map<std::string, int> report;
    };
    Session() = default;
    //Session(const Args args) {}
    Session(const Args* const args) {}
    void Run() {}
    
    bool finished = false;
    Args args;
    Result result;
  }; 


}

