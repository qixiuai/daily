
#include "burn/spo2_report.h"

#include "burn/lib/edfplus/edfplus.h"
#include "burn/common_type.h"

#include <fstream>
#include <iostream>
#include <vector>
#include <string>

std::vector<int> load_stages() {
  std::string label_path = \
    "/home/guo/data/sleepstage/database/ISRUC_Sleep/subgroupI/1/1_1.txt";
  std::ifstream in(label_path);
  std::vector<int> stages;
  std::string line;
  int counter = 0;
  while (in >> line) {
    int label = std::stoi(line);
    if (label == 5)
      label = 4;
    stages.push_back(label);
    counter += 1;
    // load 740 epochs
    if (counter >= 740)
      break;
  }
  return stages;
}

std::vector<burn::Event>
load_plms(std::string path="/home/guo/burn/data/plms.txt",
	  int event_length=2000) {
  std::ifstream in(path);
  std::vector<burn::Event> plms;
  std::string line;
  while (in >> line) {
    int start = std::stoi(line);
    plms.push_back(burn::Event(start, start+2000));
  }
  return plms;
}

std::vector<burn::Event> load_desats() {
  std::string path = "/home/guo/burn/data/desats.txt";
  return load_plms(path, 1000);
}

burn::lib::EdfPlus* get_edf() {
  std::string edf_path = "/home/guo/data/psg/physio/psg_test.edf";
  std::ifstream in(edf_path, std::ios::binary);
  in.seekg(0, in.end);
  int length = in.tellg();
  in.seekg(0, in.beg);
  
  char* raw = new char[length];
  in.read(raw, length);
  //  cerr << raw.size() << '\n';

  std::vector<unsigned char> vec;
  vec.reserve(length);
  for (int i = 0; i < length; i++) {
    vec.push_back(raw[i]);
  }
  return new burn::lib::EdfPlus(vec);  
}

int main() {
  auto stages = load_stages();
  int sleep_onset_epoch_id = 11;
  auto spo2 = get_edf()->signals["SpO2 finger"];
  auto desats = load_desats();
  
  std::vector<float> temp_spo2(spo2.begin(), spo2.begin()+22190);
  burn::Spo2Report::Args args(stages, sleep_onset_epoch_id,
			      temp_spo2, desats);
  burn::Spo2Report::Rets rets;
  burn::Spo2Report spo2_report(&rets, &args);
  spo2_report.Run();
  
  return 0;
}

