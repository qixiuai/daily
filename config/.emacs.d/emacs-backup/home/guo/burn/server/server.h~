#ifndef _PSG_RESTAPI_SERVER_H_
#define _PSG_RESTAPI_SERVER_H_

#include "cpprest/http_listener.h"
#include "burn/burn.h"

using namespace utility;
using namespace web;
using namespace web::http;
using namespace web::http::experimental::listener;

class DataFlowServer {
public:
  DataFlowServer() = default;
  DataFlowServer(utility::string_t url);
  ~DataFlowServer();

  pplx::task<void> open() {return m_listener.open();}
  pplx::task<void> close() {return m_listener.close();}

private:
  void handle_get(http_request message);
  void handle_put(http_request message);
  void handle_post(http_request message);
  void handle_delete(http_request message);
  void handle_error(pplx::task<void>& t);

  http_listener m_listener;
  
  // for analysis
  // prepare Session::Args
  std::vector<unsigned char> edf;
  std::vector<int> stages;
  std::vector<burn::Event> arousal;
  std::vector<burn::Event> desats;
  std::vector<burn::Event> oas;
  std::vector<burn::Event> cas;
  std::vector<burn::Event> mas;
  std::vector<burn::Event> hyps;
  std::vector<burn::Event> plms;
  int open_light_ms;
  int close_light_ms;
  
  burn::Session* session = nullptr;
  bool is_running = false;
};

#endif
