#include <iostream>
#include <exception>
#include <memory>
#include <string>

#include "SignalBuffer.h"
#include "MovAvgBuffer.h"
#include "MovDevBuffer.h"
#include "MovMaxBuffer.h"
#include "DurationBuffer.h"
#include "PeakBuffer.h"

template <class T>
class MyClass {
public:
  int a;
  int b;
  T c;
public:
  MyClass(int a, int b):a{a},b{b} {}
  int add(int c) {
    a = 2;
    return a+b+c;
  }
};

class SubClass: public MyClass<int> {
public:
  SubClass(int a, int b): MyClass<int>(a,b){}
};
//extern int HERE;

int main() {

  auto ptr = std::shared_ptr<int>(new int[10], std::default_delete<int[]>());

  for (int i=0; i<10; i++)
    ptr.get()[i] = i;
  
  //  for (int i=0; i<10; i++)
    //    std::cout<< ptr.get()[i] << '\t';
  std::cout << std::endl;
  /*
  MyClass myclass(1,1);
  std::cout << myclass.add(1) << std::endl;
  std::cout << myclass.a << std::endl;
  std::string str = "You Caught Me!";
  */

  SubClass subclass(1,2);
  subclass.add(3);

  DisMax::SignalBuffer signal(3);
  //  DisMax::MovAvgBuffer signal(3);
  // DisMax::MovDevBuffer signal(3);    
  // DisMax::MovMaxBuffer signal(3);  
  // DisMax::DurationBuffer signal(3);
  DisMax::PeakBuffer signal(3); 
  for (int i=0; i<10; i++)
    signal.push(i);
  for (int i=0; i<3; i++)
    std::cout<< signal[i] << '\t';

  return 0;
}
