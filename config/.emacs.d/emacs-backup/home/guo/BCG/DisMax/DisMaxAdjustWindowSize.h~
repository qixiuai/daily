
#ifndef BCG_DISMAX_DISMAXADJUSTWINDOWSIZE
#define BCG_DISMAX_DISMAXADJUSTWINDOWSIZE

#include "Buffers.h"

namespace DisMax {
  
class DisMaxAdjustWindowSize {
 private:
  SignalBuffer   signal;
  MovAvgBuffer   movavg;
  MovDevBuffer   movdev;
  MovMaxBuffer   movmax;
  DurationBuffer duration;
  PeakBuffer     peak;

  NormalGamma    ng_model;

  int last_index_of_heart;
  int last_period_of_heart;

  void adjustBuffers(int window_size) {
    signal.adjustBuffer(window_size);
    movavg.adjustBuffer(window_size);
    movdev.adjustBuffer(window_size);
    movmax.adjustBuffer(window_size);
    duration.adjustBuffer(window_size);
    peak.adjustBuffer(window_size);
  }

  void tryToAdjustWindowSize(Config& config, \
			     int last_period_of_heart,\
			     int current_period_of_heart) {
    int new_window_size; 
    if (current_period_of_heart > last_period_of_heart * 1.9) {
      new_window_size = config.window_size + std::ceil(0.016*config.Fz);
      new_window_size = config.window_size > config.max_window_size ? \
	config.max_window_size : config.window_size;
    }
    if (current_period_of_heart < last_period_of_heart * 0.1) {
      new_window_size = config.window_size - std::ceil(0.004*config.Fz);
      new_window_size = config.window_size < config.min_window_size ? \
	config.min_window_size : config.window_size;
    }
    config.window_size = new_window_size;
    if (new_window_size == config.window_size) return;
    config.window_size = new_window_size;
    adjustBuffers(config.window_size);
  }
  
  void tryToAdjustWindowSizeAndTrainModel(Config& config, int p) {
    // Heart peak is not detected!
    if (p == 0) return;
    
    auto current_index_of_heart = config.sample_index + p;
    auto last_index_of_heart    = config.last_index_of_heart;
    
    // A Big Peak, which will be detected multiple times
    if (current_index_of_heart == last_index_of_heart) return;
    
    config.last_index_of_heart = current_index_of_heart;

    // for the first time detected heart peak
    if (last_index_of_heart == 0) return;
    
    auto current_period_of_heart = current_index_of_heart - last_index_of_heart + 1;
    auto last_period_of_heart    = config.last_period_of_heart;
    config.last_period_of_heart  = current_period_of_heart;
    
    // For the second time detected heart peak;
    if (last_period_of_heart == 0) return;
    // if current_index == last_index TODO
    
    tryToAdjustWindowSize(config, last_period_of_heart, current_period_of_heart);
    
    hr = 60 * config.Fz / current_period_of_heart;
    ng_model.fit(hr);
  }
  
 public:
  Config config;

  double freq; // frequency of report

  DisMaxAdjustWindowSize(const Config& config) {
    auto window_size = config.window_size;
    signal   = SignalBuffer(window_size);
    movavg   = MovAvgBuffer(window_size);
    movdev   = MovDevBuffer(window_size);
    movmax   = MovMaxBuffer(window_size);
    duration = DurationBuffer(window_size);
    peak     = PeakBuffer(window_size);
    
    ng_model = NormalGamma(config.ng_param);

    last_index_of_heart  = 0;
    last_period_of_heart = 0;

    this->config = config;
    freq = 0;
  }
  
  int run(int x) {
    config.sample_index += 1;
    
    signal.push(x);
    
    movavg.updateFromSignalBuffer(signal);
    
    movdev.updateFromMovAvgBuffer(movavg);
    
    movmax.updateFromMovDevBuffer(movdev);
    
    duration.updateFromMovMaxBuffer(movmax);
    
    peak.updateFromDurationBuffer(duration, ng_model, config);

    p = peak[peak.end-1];

    if (p != 0)
      ng_model = fit(p); // TODO
    
    maybeAdjustWindowSize(p);

    return p;
  }
  
};

}

#endif
