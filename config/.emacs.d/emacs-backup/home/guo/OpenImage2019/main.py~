
import sys
sys.path.append("/home/guo/Github/tensorflow_models")

import tensorflow as tf

from absl import app as absl_app
from absl import logging
from absl import flags
import misc
import ob_model

from official.utils.flags import core as flags_core


def train_input_fn():
    pass



class OpenImageTask(object):

    def __init__(self, flags_obj):
        self.flags_obj = flags_obj
        self.params = {}
        
        num_gpus = flags_core.get_num_gpus(flags_obj)
        self.params = params = misc.get_model_params(flags_obj.param_set, num_gpus)

        params["num_gpus"] = num_gpus
        params["data_dir"] = flags_obj.data_dir
        params["model_dir"] = flags_obj.model_dir
        params["batch_size"] = flags_obj.batch_size or params["default_batch_size"]
        
    def train(self):
        is_train = True
        params = self.params
        model = ob_model.create_model(params, is_train)
        opt = self._create_optimizer()
        model.compile(opt)
        model.summary()

        @tf.function
        def train_steps(iterator, steps):
            def _step_fn(inputs):
                
                        
    def _create_optimizer(self):
        params = self.params
        opt = tf.keras.optimizers.Adam(
            params["learning_rate"],
            params["optimizer_adam_beta1"],
            params["optimizer_adam_beta2"],
            epsilon=params["optimizer_adam_epsilon"])
        return opt
        
    def predict(self):
        pass

    def eval(self):
        pass


def main(_):
    flags_obj = flags.FLAGS
    task = OpenImageTask(flags_obj)
    task.train()


if __name__ == "__main__":
    logging.set_verbosity(logging.DEBUG)
    misc.define_transformer_flags()
    absl_app.run(main)

