#ifndef _FILTER_
#define _FILTER_

#include <algorithm>
#include <cstdlib>
#include <vector>
#include <boost/circular_buffer.hpp>

template <class T>
using Buffer = boost::circular_buffer<T>;

class MedianFilter {
public:
  MedianFilter() {}
  MedianFilter(int kernel_size){
    this->kernel_size = kernel_size;
    this->buffer = Buffer<float>(kernel_size);
    this->vec = std::vector<float>(kernel_size);
  }
  float filter(float value);
  
private:
  int kernel_size;
  Buffer<float> buffer;
  std::vector<float> vec;
};

float MedianFilter::filter(float value) {
  this->buffer.push_back(value);
  int size = this->buffer.size();
  if (size <= 1)
    return float(value);
  for (int i = 0; i < size; i++) {
    this->vec[i] = this->buffer[i];
  }
  std::sort(vec.begin(), vec.begin() + size);
  int median_index = size / 2;
  return vec[median_index];
}

class DeviationFilter {
  DeviationFilter() {}
  MedianFilter(int kernel_size){
    this->kernel_size = kernel_size;
    this->buffer = Buffer<float>(kernel_size);
  }
  float filter(float value);
  
private:
  int kernel_size;
  Buffer<float> buffer;
};

float DeviationFilter::filter(float value) {
  this->buffer.push_back(value);
  auto max = std::max_element(this->buffer.begin(), this->buffer.end());
  auto min = std::min_element(this->buffer.begin(), this->buffer.end());
  return std::abs(max-min);
}

#endif
