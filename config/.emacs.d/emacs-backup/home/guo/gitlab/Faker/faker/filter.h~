
#ifndef _FILTER_
#define _FILTER_

#include "boost/circular_buffer.hpp"

template <class T>
using Buffer = boost::circular_buffer<T>;

// mean filter: 0.5s

template <class OutType>
class MeanFilter {
public:
  MeanFilter() = default;
  MeanFilter(int window_size): window_size{window_size} {
    buffer = Buffer<OutType>(window_size);
  }

  template <class InType>
  OutType filter(InType sample) {
    OutType first = 0;
    if (buffer.size() > 0 ) {
      first = buffer.front();
    }
    _sum += sample - first;
    buffer.push_back(sample);
    return static_cast<OutType>( _sum / buffer.size() );
  }

private:
  int window_size;
  Buffer<OutType> buffer;
  OutType _sum = 0;
};




#endif
