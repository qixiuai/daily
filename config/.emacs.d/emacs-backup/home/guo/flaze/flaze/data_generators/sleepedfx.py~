
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from tensor2tensor.utils import registry
from flaze.data_generators import stage_utils


DATA_DIR = "/home/guo/data/sleepstage/database/sleep-edfx/sleep-cassette/"
SELECT_CH = "EEG Fpz-Cz"

psg_fnames = glob.glob(os.path.join(DATA_DIR, "*PSG.edf"))
ann_fnames = glob.glob(os.path.join(DATA_DIR, "*Hypnogram.edf"))
psg_fnames.sort()
ann_fnames.sort()

from random import shuffle
fnames = list(zip(psg_fnames, ann_fnames))
shuffle(fnames)

num_train_files = int(len(fnames) * 0.6)
train_fnames    = fnames[:num_train_files]
num_val_files   = int(len(fnames) * 0.2)
val_fnames      = fnames[num_train_files : num_train_files + num_val_files]
test_fnames     = fnames[num_train_files + num_val_files : ]

@registry.register_problem
class SleepEdfx(stage_utils.StageProblem):

    @property
    def num_signals(self):
        return 1

    def encode(self, label):
        pass

    def generate_samples(self, data_dir, tmp_dir, dataset_split):
        """ stage_utils will shuffle samples """
        if dataset_split == problem.DatasetSplit.TRAIN:
            files = train_fnames
        elif dataset_split == problem.DatasetSplit.EVAL:
            
    
    

    
    
    
