#include "dsp.h"
#include "dsp_simple.h"
#include <string>
#include <map>

extern "C" {
  // General API call
  void filt(Signal signal, SignalSize signal_size, \
	    FilterType filter_type, Algorithm algorithm, \
	    Param param, ParamSize param_size) {
    dsp::Filter* filter = producefilter(filter_type, algorithm, param, param_size);
    filter_setparams(filter, param, param_size);
    filter_process(filter, num_samples, signal);
  }
}

dsp::Filter* producefilter(const FilterType filter_type, const Algorithm algorithm, \
			   const Param param, const ParamSize param_size) {
  dsp::Filter* filter;
  auto filter_type = string(filter_type);
  auto algorithm   = string(algorithm);
  if (algorithm == "butterworth") {
    assert(param_size >= 1);
    const int order = param[0]; // assume the first element of param is order of Butterworth
    if (filter_type == "lowpass")
      filter = dsp::Butterworth::LowPass<order>;
    else if (filter_type == "highpass")
      filter = dsp::Butterworth::HighPass<order>;
    else if (filter_type == "bandpass")
      filter = dsp::Butterworth::BandPass<order>;
    else if (filter_type == "bandstop")
      filter = dsp::Butterworth::BandStop<order>;
    else if (filter_type == "north") // north same with bandstop
      filter = dsp::Butterworth::BandStop<order>;
    else
      std::cerr << filter_type << "can not be identified!" << std::endl;
  } else if (algorithm == "chebyshevI") {
    assert(param_size >= 1);
    int order = param[0]; // assume the first element of param is order of ChebyshevI
    if (filter_type == "lowpass")
      filter = dsp::ChebyshevI::LowPass<order>;
    else if (filter_type == "highpass")
      filter = dsp::ChebyshevI::HighPass<order>;
    else if (filter_type == "bandpass")
      filter = dsp::ChebyshevI::BandPass<order>;
    else if (filter_type == "bandstop")
      filter = dsp::ChebyshevI::BandStop<order>;
    else if (filter_type == "north") // north same with bandstop
      filter = dsp::ChebyshevI::BandStop<order>;
    else
      std::cerr << filter_type << "can not be identified!" << std::endl;
  } else if (algorithm == "chebyshevII") {
    assert(param_size >= 1);
    int order = param[0]; // assume the first element of param is order of ChebyshevI
    if (filter_type == "lowpass")
      filter = dsp::ChebyshevII::LowPass<order>;
    else if (filter_type == "highpass")
      filter = dsp::ChebyshevII::HighPass<order>;
    else if (filter_type == "bandpass")
      filter = dsp::ChebyshevII::BandPass<order>;
    else if (filter_type == "bandstop")
      filter = dsp::ChebyshevII::BandStop<order>;
    else if (filter_type == "north") // north same with bandstop
      filter = dsp::ChebyshevII::BandStop<order>;
    else
      std::cerr << filter_type << "can not be identified!" << std::endl;
  } else {
    std::cerr << algorithm << "can not be identified!" << std::endl;
  }

  return filter;
}
    

  //  hash_table["north+butterworth"] = [](int order){ return  dsp::Butterworth::BandStop<order>;
  /*
  hash_table["lowpass+chebyshevI"]  = [](int order){ return  dsp::ChebyshevI::LowPass<order>;};
  hash_table["highpass+chebyshevI"] = [](int order){ return  dsp::ChebyshevI::HighPass<order>;};
  hash_table["bandpass+chebyshevI"] = [](int order){ return  dsp::ChebyshevI::BandPass<order>;};
  hash_table["bandstop+chebyshevI"] = [](int order){ return  dsp::ChebyshevI::BandStop<order>;};
  //  hash_table["north+chebyshevI"] = [](int order){ return  dsp::ChebyshevI::BandStop<order>;

  hash_table["lowpass+chebyshevII"]  = [](int order){ return dsp::ChebyshevII::LowPass<order>;};
  hash_table["highpass+chebyshevII"] = [](int order){ return dsp::ChebyshevII::HighPass<order>;};
  hash_table["bandpass+chebyshevII"] = [](int order){ return dsp::ChebyshevII::BandPass<order>;};
  hash_table["bandstop+chebyshevII"] = [](int order){ return dsp::ChebyshevII::BandStop<order>;};
  //  hash_table["north+chebyshevII"] = [](int order){ return  dsp::ChebyshevII::BandStop<order>;};

  hash_table["lowpass+elliptic"]  = [](int order){ return dsp::ChebyshevI::LowPass<order>;};
  hash_table["highpass+elliptic"] = [](int order){ return dsp::ChebyshevI::HighPass<order>;};
  hash_table["bandpass+elliptic"] = [](int order){ return dsp::ChebyshevI::BandPass<order>;};
  hash_table["bandstop+elliptic"] = [](int order){ return dsp::ChebyshevI::BandStop<order>;};
  //  hash_table["north+elliptic"] = [](int order){ return  dsp::ChebyshevI::BandStop<order>;};

  hash_table["lowpass+bessel"]  = [](int order){ return  dsp::Bessel::LowPass<order>;};
  hash_table["highpass+bessel"] = [](int order){ return  dsp::Bessel::HighPass<order>;};
  hash_table["bandpass+bessel"] = [](int order){ return  dsp::Bessel::BandPass<order>;};
  hash_table["bandstop+bessel"] = [](int order){ return  dsp::Bessel::BandStop<order>;}; 
  //  hash_table["north+bessel"] = [](int order){ return  dsp::Bessel::BandStop<order>;};

  hash_table["lowpass+rbj"]  = dsp::RBJ::LowPass;
  hash_table["highpass+rbj"] = dsp::RBJ::HighPass;
  hash_table["bandpass+rbj"] = dsp::RBJ::BandPass;
  hash_table["bandstop+rbj"] = dsp::RBJ::BandStop;
  //  hash_table["north+rbj"] = dsp::RBJ::BandStop;
  */
  

