#include <stdlib.h>
#include <stdio.h>


// y[n] = b[n]*x[1] + b[n-1]*x[2] + ... + b[1]*x[n]
// y[n] = b[len_b-1]*x[cur_p-len_b] + b[n-cur_p-1]*x[cur_p+1]
// len is signal size
void filter(double* y, double *x, int len, \
	    double* b, int nb, \
	    double* a, int na ) {
  // if A[0] != 1, normalize A, B;
  if (a[0] != 1) {
    for (int i=0; i<na; i++)
      a[i] = a[i] / a[0];
    for (int i=0; i<nb; i++)
      b[i] = b[i] / a[0];
  }
  
  double upper, lower;
  for (int n=0; n<len; n++) {
    upper = lower = 0;
    for (int i=0; n-i>=0 && i<nb; i++) {
      upper += b[i]*x[n-i];
    }
    for (int i=1; n-i>=0 && i<nb; i++) {
      lower += a[i]*y[n-i];
    }
    y[n] = upper - lower;
    printf("%f\t%f\t%f\n", y[n], upper, lower);
  }  
}
int main() {
  printf("Start Filter\n");

  // test 1
  // b = [2 1 3]
  // a = [1 2 -1]
  // x = [1 2 3 4]
  // y = [2 1 11 -4]
  double b[] = {2, 1, 3};
  double a[] = {1, 2, -1};
  double x[] = {2, 1, 11, -4};
  const int LEN = 4;
  double y[LEN];
  int nb = 3, na=3;
  filter(y, x, LEN, b, nb, a, na);
  for (int i=0; i<LEN; i++)
    printf("%f\t", y[i]);
  printf("\n");
  return 0;
}
