import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
from pathlib import Path

from skimage.io import imread

import torch
from torch.utils.data import Dataset, DataLoader
from torch.autograd import Variable
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

DATA_DIR = "/home/guo/cvpr2018-wad/data/"

TARGET_CLASSES = "car, motorcycle, bicycle, pedestrian, truck, bus, tricycle".split(',')

# There are total 36 classes, with which there are only 7 classes to eval.

def label_index(cls_file=DATA_DIR+"labels.txt"):
    """
    return a dict about origin label index to current label index and 
           a dict about current label index to label name
           a dict about label name to current label index
    """
    cls_idx = {}
    idx_cls = {}
    with open(cls_file) as file:
        for line in file:
            cls, idx = line.split(",")
            idx = int(idx)
            cls_idx[cls] = idx
            idx_cls[idx] = cls
    idx_old_to_new = {}
    index_to_label = {}
    label_to_index = {}
    indexes = list(cls_idx.values())
    indexes.sort()
    for (new_idx, old_idx) in enumerate(indexes):
        idx_old_to_new[old_idx] = new_idx
        label_name = idx_cls[old_idx]
        index_to_label[new_idx] = label_name
        label_to_index[label_name] = new_idx
    return idx_old_to_new, index_to_label, label_to_index

idx_old_to_new, index_to_label, label_to_index = label_index()


def process_png(png_path):
    """
    png: np.array with shape (2710, 3384)
    return label with new indexes
    """
    global label
    png = imread(png_path)
    label = np.array(png / 1000, dtype=np.int64)
    shape = label.shape
    f = lambda old_idx: idx_old_to_new[old_idx]
    label = np.array(list(map(f, label.ravel()))).reshape(shape)
    return label

class WADDataset(Dataset):
    def __init__(self, data_dir=DATA_DIR, transform=None):
        self.data_dir = data_dir
        self.transform = transform
        train_color_dir = data_dir + "train_color/"
        train_label_dir = data_dir + "train_label/"
        self.train_imgs_path = [train_color_dir + img
                                for img in os.listdir(train_color_dir)]
        self.train_label_path = [train_label_dir + png
                                 for png in os.listdir(train_label_dir)]

    def __len__(self):
        return len(self.train_imgs_path)

    def __getitem__(self, ind):
        img = imread(self.train_imgs_path[ind])
        label = process_png(self.train_label_path[ind])
        sample = {"image":img, "label":label}
        if self.transform:
            sample = self.transform(sample)
        return sample

class ToTensor(object):
    def __call__(self, sample):
        image = sample["image"]
        label = sample["label"]
        #print(image.dtype) uint8
        #print(label.dtype) uint16
        image = image.transpose((2, 0 ,1))
        #label = label.transpose((2, 0, 1))
        return {"image": torch.from_numpy(image.astype(np.float32)),
                "label": torch.from_numpy(label.astype(np.int64))}
