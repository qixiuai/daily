import os
import numpy as np
from glob import glob
from scipy.signal import lfilter
from scipy.signal import medfilt
import pdb

def lowpass(signal):
    a = np.loadtxt('coeffs/lowpass_a.csv', delimiter=',')
    b = np.loadtxt('coeffs/lowpass_b.csv', delimiter=',')
    return lfilter(b, a, signal)

def highpass(signal):
    a = np.loadtxt('coeffs/highpass_a.csv', delimiter=',')
    b = np.loadtxt('coeffs/highpass_b.csv', delimiter=',')
    return lfilter(b, a, signal)

def lowpass75(signal):
    a = np.loadtxt('coeffs/lowpass75_a.csv', delimiter=',')
    b = np.loadtxt('coeffs/lowpass75_b.csv', delimiter=',')
    return lfilter(b, a, signal)

def lowpass100(signal):
    a = np.loadtxt('coeffs/lowpass100_a.csv', delimiter=',')
    b = np.loadtxt('coeffs/lowpass100_b.csv', delimiter=',')
    return lfilter(b, a, signal)

class RealTimeFilter(object):
    def __init__(self, filter_type):
        a = np.loadtxt('coeffs/'+filter_type+'_a.csv', delimiter=',')
        b = np.loadtxt('coeffs/'+filter_type+'_b.csv', delimiter=',')
        self.b = b
        self.a = a
        self.zi = lfilter(b, a)
        
    def filter(self, x, zi):
        y, zi = lfilter(self.b, self.a, [x], zi=zi)
        return y, zi

def load_data(file_path):
    data = np.loadtxt(file_path)
    return data

def save_data(out_path, signal):
    with open(out_path, 'w') as out:
        for val in signal:
            out.write(str(val)+'\n')

def main(data_dir):
    for filename in os.listdir(data_dir):
        if filename[:13] != "parsed_heart[":
            continue
        file_path   = os.path.join(data_dir, filename)
        signal      = load_data(file_path)
        signal = medfilt(signal, kernel_size=101)
        signal_filt = lowpass(signal)
        #signal_filt = highpass(signal)
        out_path    = data_dir + 'lowpass_' + filename
        save_data(out_path, signal_filt)

if __name__ == '__main__':
    data_dir = 'data/'
    main(data_dir)

        

