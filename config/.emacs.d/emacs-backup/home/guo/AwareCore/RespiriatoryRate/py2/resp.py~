import os
import peakutils

from glob import glob
import numpy as np
from scipy.signal import medfilt
from scipy.signal import lfilter

from absl import app
from absl import flags
from absl import logging

import pdb

logging.set_verbosity(logging.DEBUG)

FLAGS = flags.FLAGS
flags.DEFINE_string("data_dir", "/home/guo/AwareCore/RespiriatoryRate/py2/data/",
                    "data directory of respiratate data")
flags.DEFINE_float("thres", 0.78, "thres of peakutils.indexes")
flags.DEFINE_integer("min_dist", 90, "min distance of peakutils.indexes")
flags.DEFINE_integer("buffer_size_in_seconds", 22, "buffer size")

def load_files(data_dir):
    classes = ["Thermal", "Abdominal", "Chest", "Pressure"]
    files = {}
    for c in classes:
        files_class = glob(data_dir + "**/"+ c + "*.dat",
                           recursive=True)
        files_class.sort()
        files[c] = files_class
    info = "\n"+"\n".join(files[classes[0]])
    logging.log(logging.DEBUG, info)
    return files

def lowpass75(signal):
    a = np.loadtxt('coeffs/lowpass75_a.csv', delimiter=',')
    b = np.loadtxt('coeffs/lowpass75_b.csv', delimiter=',')
    return lfilter(b, a, signal)

def lowpass100(signal):
    a = np.loadtxt('coeffs/lowpass100_a.csv', delimiter=',')
    b = np.loadtxt('coeffs/lowpass100_b.csv', delimiter=',')
    return lfilter(b, a, signal)

def filter(filepath, Fz, kernel_size=15):
    f = open(filepath)
    raw  = f.read()
    f.close()
    data = raw[1:]
    data = data.split(" ")
    signal = []
    for val_str in data:
        if len(val_str) > 0:
            signal.append(float(val_str))
    signal = medfilt(signal, kernel_size=kernel_size)
    if Fz == 75:
        signal = lowpass75(signal)
    elif Fz == 100:
        signal = lowpass100(signal)
    else:
        raise Exception("Unexpected Fz {}".format(Fz))
    new_filepath = os.path.join(os.path.dirname(filepath), "lowpass"+ \
                                str(Fz) + os.path.basename(filepath))
    logging.log(logging.DEBUG, '\n'+new_filepath)
    np.savetxt(new_filepath, signal, fmt="%.18f", delimiter=',')
    return new_filepath

def run_filter(files_each_class):
    lowpass_files_each_class = {}
    for c in files_each_class.keys():
        files = files_each_class[c]
        if c in ["Abdominal", "Chest"]:
            files = list(map(lambda file: filter(file, 100), files))
            lowpass_files_each_class[c] = files
        elif c in ["Thermal", "Pressure"]:
            files = list(map(lambda file: filter(file, 75), files))
            lowpass_files_each_class[c] = files
        else:
            raise Exception("Undefined class" + c)
    return lowpass_files_each_class

def get_resp_rate(signal, Fz, thres, min_dist):
    ipks = peakutils.indexes(signal, thres=thres, min_dist=min_dist)
    d = np.diff(ipks)
    d.sort()
    m = get_heart_rate_from_cycles(np.asarray(d))
    rate = Fz*60/m
    return rate

def get_heart_rate_from_cycles(cycles):
    if len(cycles) == 0:
        return -1;
    if len(cycles) == 1:
        return cycles[0]
    if len(cycles) == 2:
        return np.mean(cycles)
    hist, bin_edges = np.histogram(cycles)
    max_bin_ind   = np.argmax(hist)
    max_bin_upper = bin_edges[max_bin_ind+1]
    max_bin_lower = bin_edges[max_bin_ind]
    new_cycles = []
    for cycle in cycles:
        if cycle >= max_bin_lower and cycle <= max_bin_upper:
            new_cycles.append(cycle)
    return np.median(new_cycles)

def calc_resp_rate(filepath, Fz):
    data = np.loadtxt(filepath, delimiter=",")
    Fz, thres, min_dist = Fz, FLAGS.thres, FLAGS.min_dist
    rates = []
    for ind_st in range(len(data)-75*23):
        signal = data[ind_st:ind_st+75*30]
        rate = get_resp_rate(signal, Fz, thres, min_dist)
        rates.append(rate)
    return rates

def main(argv):
    del argv
    files_each_class         = load_files(FLAGS.data_dir)
    lowpass_files_each_class = run_filter(files_each_class)
    rates_file = {}
    for c in lowpass_files_each_class.keys():
        files = lowpass_files_each_class[c]
        if c in ["Abdominal", "Chest"]:
            for file in files:
                logging.info("calculating resp_rate of "+ file)
                rates = calc_resp_rate(file, 100)
        elif c in ["Thermal", "Pressure"]:
            for file in files:
                logging.info("calculating resp_rate of "+ file)
                rates = calc_resp_rate(file, 75)
        else:
            raise Exception("Undefined class" + c)
        rates_file[file] = rates

if __name__ == "__main__":
    app.run(main)
