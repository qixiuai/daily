from __future__ import print_function
from collections import deque
import numpy as np
import matplotlib.pyplot as  plt
import pdb

def isfull(q):
    return len(q) == q.maxlen

class HeartPeak(object):
    def __init__(self):
        self.signal = deque(maxlen=2c0000)
        self.index_start = 0
        
    def findpeak(self, val):
        self.signal.append(val)
        if not isfull(self.signal):
            return [],[]
        ipks_full = self.indexes(thres=0.8, min_dist=100)
        ipks_good = self.indexes(thres=0.8, min_dist=500)
        return (ipks_full,ipks_good)
        
    def indexes(self, thres=0.8, min_dist=100):
        y = np.asarray(self.signal)
        dy = np.diff(y)
        thres = thres * (np.max(y) - np.min(y)) + np.min(y)
        peaks = np.where((np.hstack([dy, 0.]) < 0.)
                         & (np.hstack([0., dy]) > 0.)
                         & (y > thres))[0]
        if peaks.size > 1 and min_dist > 1:
            highest = peaks[np.argsort(y[peaks])][::-1]
            rem = np.ones(y.size, dtype=bool)
            rem[peaks] = False
            for peak in highest:
                if not rem[peak]:
                    sl        = slice(max(0, peak - min_dist), peak + min_dist + 1)
                    rem[sl]   = True
                    rem[peak] = False
        peaks = np.arange(y.size)[~rem]
        peaks = peaks + self.index_start
        return peaks.tolist()

    def peakfilter(self, ipks):
        return ipks

def main(data_file):
    data = np.loadtxt(data_file)
    signal = data[:1000000]
    peaker = HeartPeak()
    for ind, val in enumerate(signal):
        ipks_full, ipks_good = peaker.findpeak(val)
#        if ind < 15000:
#            print(ind)
#            continue        
        if len(ipks_good) > 0:
            print("found num of peaks: {}".format(len(ipks_good)))
            ipks = ipks_good
            cycles = np.diff(ipks_good)
#            cycles.sort()
            print(cycles)
            dc = np.diff(cycles)
#            dc.sort()
            print(dc)
            plt.plot(peaker.signal, 'blue')
            plt.plot(ipks_good, np.asarray(peaker.signal)[ipks_good], 'ro', markersize=15)
            '''
            cycles = np.diff(ipks_full)
            cycles.sort()
            print(cycles)
            dc = np.diff(cycles)
#            dc.sort()
            print(dc)
            plt.plot(peaker.signal)
            plt.plot(ipks_full, np.asarray(peaker.signal)[ipks_full], 'y+', markersize=8)
            min = np.min(peaker.signal)
            max = np.max(peaker.signal)            
            plt.axhline((max-min)*0.8+min, color='r')
            '''
            plt.show()
            break
        
if __name__ == '__main__':
    data_file = 'data/lizhaoxin_bcg.txt'
    main(data_file)
