
#include <iostream>
#include <fstream>
#include <string>

#include "protobuf/AddressBook.pb.h"

using namespace std;

void PromptForAddress(Person* person) {
  cout << "Enter persion ID number: ";
  int id;
  cin >> id;
  person->set_id(id);
  cin.ignore(256, '\n');
  
  cout << "Enter name: ";
  getline(cin, *person->mutable_name());

  cout << "Enter email: ";
  string  email;
  getline(cin, email);
  if (!email.empty()) {
    person->set_email(email);
  }

  while (true) {
    cout << "Enter phone number";
    string number;
    getline(cin, number);
    if (number.empty()) {
      break;
    }
    Person::PhoneNumber* phone_number = person->add_phone();
    phone_number->set_number(number);

    cout << "mobile, home, or work phone ?";
    string type;
    getline(cin, type);
    if (type == "mobile")
      phone_number->set_type(Person::MOBILE);
    else if (type == "home")
      phone_number->set_type(Person::HOME);
    else if (type == "WORK")
      phone_number->set_type(Person::WORK);
    else
      cout << "Unknown phone type." << endl;
  }
  
}


int main(int argc, char* argv[]) {
  
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  
  AddressBook address_book;

  {
    // Read the existing address book.
    fstream input(argv[1], ios::in | ios::binary);
    if (!input) {
      cout << argv[1] << ": File not found.  Creating a new file." << endl;
    } else if (!address_book.ParseFromIstream(&input)) {
      cerr << "Failed to parse address book." << endl;
      return -1;
    }
  }
  
  PromptForAddress(address_book.add_people());

   {
    // Write the new address book back to disk.
    fstream output(argv[1], ios::out | ios::trunc | ios::binary);
    if (!address_book.SerializeToOstream(&output)) {
      cerr << "Failed to write address book." << endl;
      return -1;
    }
  }
  
  google::protobuf::ShutdownProtobufLibrary();
  
  return 0;
}
