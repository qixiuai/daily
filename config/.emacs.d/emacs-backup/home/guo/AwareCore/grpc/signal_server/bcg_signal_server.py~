# signal service:
#              1. tcp server to receive tcp packets from hardware
#              2. signal client to seed data to alg server

from concurrent import futures
import time

import grpc

import Signals_pb2
import Signals_pb2_grpc

from Signals_pb2 import BCGSignal

_ONE_DAY_IN_SECONDS = 60 * 60 * 24

def make_BCGSignal(val):
    return BCGSignal(val=val)

class BCGSignalServicer(Signals_pb2_grpc.SignalsServiceServicer):
    def __init__(self):
        self.signal_pool = list(map(make_BCGSignal, [1,2,3])) # For test usage
        
    def GetDemo(self, request, context):
        return make_BCGSignal(1);
        
    def GetSignal(self, request, context):
        print("Get request from %s\n", request.clientname) # TODO
        for signal in self.signal_pool:
            yield signal

def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=2))
    Signals_pb2_grpc.add_SignalsServiceServicer_to_server(BCGSignalServicer(), server)
    server.add_insecure_port("192.168.4.3:50051")
    server.start()
    try:
        while True:
            time.sleep(_ONE_DAY_IN_SECONDS)
    except KeyboardInterrupt:
        server.stop(0)

if __name__ == '__main__':
    serve()
