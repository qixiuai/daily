// bcg alg client

#include <chrono>
#include <iostream>
#include <memory>
#include <string>
#include <thread>

#include <grpc/grpc.h>
#include <grpcpp/channel.h>
#include <grpcpp/client_context.h>
#include <grpcpp/create_channel.h>
#include <grpcpp/security/credentials.h>

#include "BCG.grpc.pb.h"

using grpc::Channel;
using grpc::ClientContext;
using grpc::ClientReader;
using grpc::ClientWriter;
using grpc::Status;
using BCG::BCGAlgComm;
using BCG::BCGSummary;
using BCG::ClientName;
using BCG::Signal;


class BCGAlgCommClient {
public:
  BCGAlgCommClient(std::shared_ptr<Channel> channel)
    : stub_(BCGAlgComm::NewStub(channel)) {}

  void GetSignal() {
    ClientName    client_name;
    Signal        signal;
    ClientContext context;

    client_name.set_name("alg_client");
    stub_->GetSignal(&context, client_name);
    std::unique_ptr<ClientReader<Signal> > reader(
	 stub_->GetSignal(&context, client_name));

    while (reader->Read(&signal)) {
      std::cout << "Get Signal: "
		<< signal.val()
		<< std::endl;
    }
    Status status = reader->Finish();
    if (status.ok()) {
      std::cout << "GetSignal rpc succeeded." << std::endl;
    } else {
      std::cout << "GetSignal rpc failed." << std::endl;
    }
  }
  void GetBCGSummary() {
    ClientName client_name;
    BCGSummary bcg_summary;
    ClientContext context;
    client_name.set_name("alg_client");

    std::unique_ptr<ClientReader<BCGSummary>> reader(
	 stub_->GetBCGSummary(&context, client_name));

    while (reader->Read(&bcg_summary)) {
      std::cout << "Get BCG summary "
		<< bcg_summary.result_summary().heart_rate()
		<< std::endl;
    }
    Status status = reader->Finish();
    if (status.ok()) {
      std::cout << "GetBCGSummary rpc succeeded." << std::endl;
    } else {
      std::cout << "GetBCGSummary rpc failed." << std::endl;
    }
  }
private:
  std::unique_ptr<BCGAlgComm::Stub> stub_;
};

int main() {
  BCGAlgCommClient alg_client(grpc::CreateChannel("192.168.4.3:50051",
						  grpc::InsecureChannelCredentials()));
  std::cout << "-------------- GetSignal --------------" << std::endl;
  //  alg_client.GetSignal();
  std::cout << "-------------- GetBCGSummary --------------" << std::endl;
  //  alg_client.GetBCGSummary();
  
  return 0;
}
