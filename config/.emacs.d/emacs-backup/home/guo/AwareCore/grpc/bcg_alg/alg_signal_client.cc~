// bcg alg client
#include <chrono>
#include <iostream>
#include <memory>
#include <string>
#include <thread>

#include <grpc/grpc.h>
#include <grpcpp/channel.h>
#include <grpcpp/client_context.h>
#include <grpcpp/create_channel.h>
#include <grpcpp/security/credentials.h>

#include "Signals.grpc.pb.h"

using grpc::Channel;
using grpc::ClientContext;
using grpc::ClientReader;
using grpc::ClientWriter;
using grpc::Status;

using physio::SignalsService;
using physio::ClientName;
using physio::BCGSignal;


class BCGSignalClient {
public:
  BCGSignalClient(std::shared_ptr<Channel> channel)
    : stub_(SignalsService::NewStub(channel)) {}

  void GetBCGSignal() {
    ClientName    client_name;
    BCGSignal        signal;
    ClientContext context;
    client_name.set_name("alg_client");
    
    std::unique_ptr<ClientReader<BCGSignal> > reader(
        stub_->GetBCGSignal(&context, client_name));
    while (reader->Read(&signal)) {
      std::cout << "Get BCGSignal: "
		<< signal.val()
		<< std::endl;
    }
    Status status = reader->Finish();
    if (status.ok()) {
      std::cout << "GetSignal rpc succeeded." << std::endl;
    } else {
      std::cout << "GetSignal rpc failed." << std::endl;
    }
  }
  
  void GetDemo() {
    ClientName    client_name;
    BCGSignal        signal;
    ClientContext context;
    client_name.set_name("alg_client");

    Status status = stub_->GetDemo(&context, client_name, &signal);
    
    if (status.ok()) {
      std::cout << "GetSignal rpc succeeded." << std::endl;
    } else {
      std::cout << "GetSignal rpc failed." << std::endl;
    }
  }
  
private:
  std::unique_ptr<SignalsService::Stub> stub_;
};

int main() {
  auto c = grpc::CreateChannel("192.168.4.3:50051",
			       grpc::InsecureChannelCredentials());
  BCGSignalClient bcg_signal_client(c);
  std::cout << "-------------- GetSignal --------------" << std::endl;
  bcg_signal_client.GetBCGSignal();

  return 0;
}
