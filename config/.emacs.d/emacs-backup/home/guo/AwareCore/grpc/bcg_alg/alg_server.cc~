// bcg alg grpc server

#include <algorithm>
#include <chrono>
#include <iostream>
#include <memory>
#include <string>

#include <grpc/grpc.h>
#include <grpcpp/server.h>
#include <grpcpp/server_builder.h>
#include <grpcpp/server_context.h>
#include <grpcpp/security/server_credentials.h>

#include "BCG.grpc.pb.h"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::ServerReader;
using grpc::ServerWriter;
using grpc::Status;
using BCG::BCGAlgComm;
using BCG::BCGSummary;
using BCG::ClientName;
using BCG::Signal;
using std::chrono::system_clock;


class BCGAlgCommImpl final : public BCGAlgComm::Service {
public:
  Status GetSignal(ServerContext* context, const ClientName* client_name,
		   ServerWriter<Signal>* writer) override {
    return Status::OK;
  }
  Status GetBCGSummary(ServerContext* context, const ClientName* client_name,
		       ServerWriter<BCGSummary>* writer) override {
    return Status::OK;
  }
};

void RunServer() {
  std::string server_address("192.168.4.3:50051");
  BCGAlgCommImpl service;

  ServerBuilder builder;
  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
  builder.RegisterService(&service);
  std::unique_ptr<Server> server(builder.BuildAndStart());
  std::cout << "Server listening on " << server_address << std::endl;
  server->Wait();
}


int main() {
  RunServer(); 
  return 0;
}
