# tcp server and also gRPC client

from __future__ import print_function

import socket,os
import sys
import data

import grpc

import Signals_pb2
import Signals_pb2_grpc

class LiFengClient:
    def __init__(self):
        self.__socket_ = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.__socket_.connect(('192.168.4.5', 7006))
    
    def send(self, seq):
        self.__socket_.send(seq)

def make_BCGSignal(val):
    return Signals_pb2.BCGSignal(val=val)

def parseBinarySequence(__binseq):
    raise Exception("Bugged version") #FIXME
    raw = __binseq
    seg = buf[16:-7]
    seg = seg.decode('utf-8')
    seg = seg.strip()
    seg = seg.split(',')
    try:
        seg = list(map(int, seg))
    except:
        print(raw, file=sys.stderr)
        print(seg, file=sys.stderr)
    return seg

class BCGSignalsClient:
    def __init__(self, __server_address_port="192.168.4.3:50051"):
        self.__server_address_port_ = __server_address_port
        
    def send(self, __binseq):
        __points = parseBinarySequence(__binseq)
        __pl = len(__points)
        __ssz = self.__stub_.PostBCGSignal(self._generate_BCGSignals(__points))
        assert __pl == __ssz.size

    def _generate_BCGSignals(self, __points):
        for point in __points:
            yield make_BCGSignal(point)
            
    def __enter__(self):
        self.__channel_ = grpc.insecure_channel(self.__server_address_port_)
        self.__stub_    = Signals_pb2_grpc.SignalsStub(self.__channel_) # TODO

    def __exit__(self):
        self.__channel_.close()
            
class TCPServer:
    def __init__(self):
        self.__socket_ = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.__socket_.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.__clients_ = []

    def add_client(self, client):
        self.__clients_.append(client)
        
    def start(self):
        self.__socket_.listen(5)
        try:
            self.__connection_, address = self.__socket_.accept()
            while True:
                buf = self.__connection_.recv(1460)
                for client in self.__clients_:
                    async client.send(seq) # TODO

    def add_insecure_port(address_port):
        # address_port: '192.168.4.3:7006'
        ip, port = address_port.split(":")
        port = int(port)
        try:
            self.__socket_.bind((ip, port))
        except:
            print("socket bind error to {}:{}".format(ip, port), file=sys.stderr)

    def __enter__(self):
        pass

    def __exit__(self):
        self.__connection_.close()
        self.__socket_.close()

def run():
    lifeng = LiFengClient()
    with TCPServer(), BCGSignalsClient("192.168.4.3:50051") as server, client:
        server.add_client(client)
        server.add_client(lifeng)
        server.add_insecure_port("192.168.4.3:7006")
        server.start()
            
if __name__ == '__main__':
    run()





