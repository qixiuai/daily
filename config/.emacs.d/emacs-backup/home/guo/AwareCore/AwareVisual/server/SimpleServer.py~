from __future__ import print_function

import socket,os
import sys
import data

import grpc

#import Signals_pb2
#import Signals_pb2_grpc

def parseBinarySequence(__binseq):
    raise Exception("Bugged version") #FIXME
    raw = __binseq
    seg = buf[16:-7]
    seg = seg.decode('utf-8')
    seg = seg.strip()
    seg = seg.split(',')
    try:
        seg = list(map(int, seg))
    except:
        print(raw, file=sys.stderr)
        print(seg, file=sys.stderr)
    return seg
            
class TCPServer:
    def __init__(self):
        self.__socket_ = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.__socket_.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.__clients_ = []

    def add_client(self, client):
        self.__clients_.append(client)
        
    def start(self):
        self.__socket_.listen(5)
        try:
            self.__connection_, address = self.__socket_.accept()
            f = open("raw_signal.txt", 'w')
            while True:
                buf = self.__connection_.recv(1460)
                f.write(buf)
            f.close()
        except:
            print(buf)
                    
    def add_insecure_port(address_port):
        # address_port: '192.168.4.3:7006'
        ip, port = address_port.split(":")
        port = int(port)
        try:
            self.__socket_.bind((ip, port))
        except:
            print("socket bind error to {}:{}".format(ip, port), file=sys.stderr)

    def __enter__(self):
        pass

    def __exit__(self, a, b, c):
        print(a)
        print(b)
        print(c)
        self.__connection_.close()
        self.__socket_.close()

def run():
    server = TCPServer();
    with TCPServer() as server:
        server.start()
            
if __name__ == '__main__':
    run()





