
#include <stdio.h>

// For Fz = 500Hz 

void filter(double* y, double *x, int n, double* b, int nb, double* a, int na);


void Bandpass20_38(double*y, double*x, int n) {
  // Fz = 500Hz  
  // Den is a;
  double Den[] = {1,-3.828138e+01,7.183271e+02,-8.804360e+03,7.925217e+04,-5.585011e+05,3.207640e+06,-1.543254e+07,6.344920e+07,-2.262913e+08,7.082984e+08,-1.963705e+09,4.858152e+09,-1.079007e+10,2.162142e+10,-3.924798e+10,6.475482e+10,-9.737086e+10,1.337325e+11,-1.680508e+11,1.934640e+11,-2.042240e+11,1.977840e+11,-1.757639e+11,1.433000e+11,-1.071298e+11,7.337222e+10,-4.597800e+10,2.631609e+10,-1.372768e+10,6.508743e+09,-2.795589e+09,1.083329e+09,-3.768854e+08,1.170033e+08,-3.217389e+07,7.764650e+06,-1.625547e+06,2.908183e+05,-4.358552e+04,5.323785e+03,-5.091060e+02,3.575567e+01,-1.640343e+00,3.688798e-02};
  // Num is b;
  double Num[] = {7.173342e-22,0,-1.578135e-20,0,1.657042e-19,0,-1.104695e-18,0,5.247300e-18,0,-1.889028e-17,0,5.352246e-17,0,-1.223370e-16,0,2.293820e-16,0,-3.568164e-16,0,4.638613e-16,0,-5.060305e-16,0,4.638613e-16,0,-3.568164e-16,0,2.293820e-16,0,-1.223370e-16,0,5.352246e-17,0,-1.889028e-17,0,5.247300e-18,0,-1.104695e-18,0,1.657042e-19,0,-1.578135e-20,0,7.173342e-22};
  
  filter(y, x, n, Num, 607, Den, 1);
}

void Notch(double*y, double*x, int n) {
  // Den is a;
  double Den[] = {1};
  // Num is b;
  double Num[] = {4.8576e-06,9.9394e-06,1.2252e-05,9.145e-06,5.7868e-08,-1.2517e-05,-2.3459e-05,-2.6931e-05,-1.9132e-05,-6.7327e-07,2.2663e-05,4.1502e-05,4.6471e-05,3.2511e-05,1.9979e-06,-3.4956e-05,-6.3644e-05,-7.0478e-05,-4.9097e-05,-4.2229e-06,4.8767e-05,8.8944e-05,9.7995e-05,6.8306e-05,7.4575e-06,-6.3195e-05,-0.00011592,-0.00012745,-8.9094e-05,-1.168e-05,7.7091e-05,0.00014255,0.00015666,0.00010994,1.6695e-05,-8.9123e-05,-0.00016637,-0.00018286,-0.00012885,-2.209e-05,9.786e-05,0.00018454,0.00020284,0.00014341,2.7223e-05,-0.00010188,-0.00019404,-0.00021307,-0.00015091,-3.1211e-05,9.9871e-05,0.00019186,0.00020993,0.00014847,3.2959e-05,-9.0791e-05,-0.00017523,-0.00019,-0.00013327,-3.1214e-05,7.3951e-05,0.00014189,0.00015034,0.00010275,2.4649e-05,-4.9141e-05,-9.0347e-05,-8.8824e-05,-5.4906e-05,-1.1973e-05,1.6706e-05,2.0104e-05,4.4456e-06,-1.1426e-05,-7.9226e-06,2.2413e-05,6.8109e-05,0.00010237,9.6321e-05,3.5808e-05,-6.6672e-05,-0.00017219,-0.00022955,-0.00019851,-7.1951e-05,0.00011397,0.0002886,0.00037318,0.00031518,0.00011595,-0.00016174,-0.00041234,-0.00052745,-0.00044187,-0.00016659,0.00020708,0.0005371,0.00068472,0.00057243,0.00022174,-0.00024698,-0.00065543,-0.00083567,-0.00069914,-0.00027829,0.00027844,0.0007591,0.00096967,0.00081288,0.00033217,-0.00029881,-0.00083947,-0.0010752,-0.0009035,-0.00037841,0.00030591,0.00088799,0.0011405,0.0009603,0.00041136,-0.00029832,-0.00089674,-0.001154,-0.00097258,-0.0004249,0.00027553,0.00085902,0.0011057,0.00093037,0.00041281,-0.00023805,-0.00076984,-0.00098706,-0.00082512,-0.00036921,0.00018745,0.00062651,0.00079262,0.00065052,0.00028902,-0.00012641,-0.00042903,-0.00052026,-0.00040325,-0.00016847,5.851e-05,0.00018043,0.00017197,8.3634e-05,5.6806e-06,1.1885e-05,0.00011306,0.00024571,0.0003037,0.00019888,-7.9944e-05,-0.00044198,-0.00072137,-0.00074944,-0.00044193,0.0001407,0.00079382,0.0012388,0.0012394,0.00071704,-0.00018946,-0.0011534,-0.0017769,-0.0017544,-0.0010144,0.00022218,0.0015032,0.0023108,0.0022707,0.0013207,-0.00023594,-0.0018244,-0.0028119,-0.0027605,-0.0016195,0.00022932,0.0020975,0.0032491,0.0031928,0.0018912,-0.00020267,-0.0023031,-0.0035905,-0.0035344,-0.0021139,0.00015841,0.0024232,0.0038039,0.0037512,0.002264,-0.00010114,-0.0024418,-0.0038592,-0.0038097,-0.0023172,3.7593e-05,0.0023461,0.0037292,0.0036789,0.0022493,2.352e-05,-0.0021273,-0.0033916,-0.0033314,-0.002038,-7.1794e-05,0.0017811,0.0028299,0.0027453,0.0016634,9.5611e-05,-0.0013082,-0.0020353,-0.0019056,-0.0011096,-8.2707e-05,0.00071457,0.0010067,0.00080567,0.00036599,2.0858e-05,-1.159e-05,0.00024799,0.00055226,0.00057199,0.00010138,-0.00078455,-0.0017118,-0.002156,-0.001702,-0.00029389,0.0016532,0.003359,0.0039835,0.0030141,0.00056427,-0.0025699,-0.0051558,-0.0060029,-0.0044907,-0.00091711,0.0035076,0.0070607,0.0081731,0.0061066,0.0013535,-0.0044377,-0.0090266,-0.010445,-0.0078291,-0.0018704,0.005331,0.011002,0.012763,0.0096195,0.0024609,-0.0061593,-0.012933,-0.015068,-0.011434,-0.0031134,0.0068964,0.014765,0.017295,0.013223,0.0038128,-0.0075194,-0.016445,-0.019383,-0.014939,-0.00454,0.0080094,0.017924,0.02127,0.01653,0.0052733,-0.0083526,-0.019159,-0.0229,-0.017947,-0.0059888,0.0085409,0.020114,0.024224,0.019146,0.0066614,-0.0085716,-0.020762,-0.0252,-0.020088,-0.0072662,0.0084482,0.021084,0.025798,0.020739,0.0077794,-0.0081795,-0.021076,0.97398,-0.021076,-0.0081795,0.0077794,0.020739,0.025798,0.021084,0.0084482,-0.0072662,-0.020088,-0.0252,-0.020762,-0.0085716,0.0066614,0.019146,0.024224,0.020114,0.0085409,-0.0059888,-0.017947,-0.0229,-0.019159,-0.0083526,0.0052733,0.01653,0.02127,0.017924,0.0080094,-0.00454,-0.014939,-0.019383,-0.016445,-0.0075194,0.0038128,0.013223,0.017295,0.014765,0.0068964,-0.0031134,-0.011434,-0.015068,-0.012933,-0.0061593,0.0024609,0.0096195,0.012763,0.011002,0.005331,-0.0018704,-0.0078291,-0.010445,-0.0090266,-0.0044377,0.0013535,0.0061066,0.0081731,0.0070607,0.0035076,-0.00091711,-0.0044907,-0.0060029,-0.0051558,-0.0025699,0.00056427,0.0030141,0.0039835,0.003359,0.0016532,-0.00029389,-0.001702,-0.002156,-0.0017118,-0.00078455,0.00010138,0.00057199,0.00055226,0.00024799,-1.159e-05,2.0858e-05,0.00036599,0.00080567,0.0010067,0.00071457,-8.2707e-05,-0.0011096,-0.0019056,-0.0020353,-0.0013082,9.5611e-05,0.0016634,0.0027453,0.0028299,0.0017811,-7.1794e-05,-0.002038,-0.0033314,-0.0033916,-0.0021273,2.352e-05,0.0022493,0.0036789,0.0037292,0.0023461,3.7593e-05,-0.0023172,-0.0038097,-0.0038592,-0.0024418,-0.00010114,0.002264,0.0037512,0.0038039,0.0024232,0.00015841,-0.0021139,-0.0035344,-0.0035905,-0.0023031,-0.00020267,0.0018912,0.0031928,0.0032491,0.0020975,0.00022932,-0.0016195,-0.0027605,-0.0028119,-0.0018244,-0.00023594,0.0013207,0.0022707,0.0023108,0.0015032,0.00022218,-0.0010144,-0.0017544,-0.0017769,-0.0011534,-0.00018946,0.00071704,0.0012394,0.0012388,0.00079382,0.0001407,-0.00044193,-0.00074944,-0.00072137,-0.00044198,-7.9944e-05,0.00019888,0.0003037,0.00024571,0.00011306,1.1885e-05,5.6806e-06,8.3634e-05,0.00017197,0.00018043,5.851e-05,-0.00016847,-0.00040325,-0.00052026,-0.00042903,-0.00012641,0.00028902,0.00065052,0.00079262,0.00062651,0.00018745,-0.00036921,-0.00082512,-0.00098706,-0.00076984,-0.00023805,0.00041281,0.00093037,0.0011057,0.00085902,0.00027553,-0.0004249,-0.00097258,-0.001154,-0.00089674,-0.00029832,0.00041136,0.0009603,0.0011405,0.00088799,0.00030591,-0.00037841,-0.0009035,-0.0010752,-0.00083947,-0.00029881,0.00033217,0.00081288,0.00096967,0.0007591,0.00027844,-0.00027829,-0.00069914,-0.00083567,-0.00065543,-0.00024698,0.00022174,0.00057243,0.00068472,0.0005371,0.00020708,-0.00016659,-0.00044187,-0.00052745,-0.00041234,-0.00016174,0.00011595,0.00031518,0.00037318,0.0002886,0.00011397,-7.1951e-05,-0.00019851,-0.00022955,-0.00017219,-6.6672e-05,3.5808e-05,9.6321e-05,0.00010237,6.8109e-05,2.2413e-05,-7.9226e-06,-1.1426e-05,4.4456e-06,2.0104e-05,1.6706e-05,-1.1973e-05,-5.4906e-05,-8.8824e-05,-9.0347e-05,-4.9141e-05,2.4649e-05,0.00010275,0.00015034,0.00014189,7.3951e-05,-3.1214e-05,-0.00013327,-0.00019,-0.00017523,-9.0791e-05,3.2959e-05,0.00014847,0.00020993,0.00019186,9.9871e-05,-3.1211e-05,-0.00015091,-0.00021307,-0.00019404,-0.00010188,2.7223e-05,0.00014341,0.00020284,0.00018454,9.786e-05,-2.209e-05,-0.00012885,-0.00018286,-0.00016637,-8.9123e-05,1.6695e-05,0.00010994,0.00015666,0.00014255,7.7091e-05,-1.168e-05,-8.9094e-05,-0.00012745,-0.00011592,-6.3195e-05,7.4575e-06,6.8306e-05,9.7995e-05,8.8944e-05,4.8767e-05,-4.2229e-06,-4.9097e-05,-7.0478e-05,-6.3644e-05,-3.4956e-05,1.9979e-06,3.2511e-05,4.6471e-05,4.1502e-05,2.2663e-05,-6.7327e-07,-1.9132e-05,-2.6931e-05,-2.3459e-05,-1.2517e-05,5.7868e-08,9.145e-06,1.2252e-05,9.9394e-06,4.8576e-06};
  
  filter(y, x, n, Num, 607, Den, 1);
}


void filter(double* y, double *x, int n, double* b, int nb, double* a, int na) {
  double upper, lower;
  upper = lower = 0;
  for (int i=0; n-i>=0 && i<nb; i++) {
    upper += b[i]*x[n-i];
  }
  for (int i=1; n-i>=0 && i<na; i++) {
    lower += a[i]*y[n-i];
  }
  y[n] = upper - lower;
}

int main() {

  double x[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,100000};
  double y[14];
  for (int i = 0; i < 15; i++) {
    Bandpass20_38(y, x, i);
  }
  for (int i = 0; i < 15; i++) {
    printf("%f\t", y[i]);
  }
}
