#ifndef _PHYSIO_FILTER_DETREND_
#define _PHYSIO_FILTER_DETREND_

#include <algorithm>
//#include <execution>
#include <numeric>
#include <string>
#include <vector>

#include "utils/utils.h"

namespace physio {

 template <template<class> class containter, class T>
   T median(const containter<T>& vec) noexcept {
   auto half_vec_len = vec.size() / 2;
   std::vector<int> indexes = std::vector<int>(vec.size());
   std::iota(indexes.begin(), indexes.end(), 0);
   std::partial_sort(indexes.begin(), indexes.begin()+half_vec_len+1, indexes.end(),
	     [&vec](std::size_t i1, std::size_t i2) {
	       return vec[i1] > vec[i2];
	     });
   int med_idx = indexes[vec.size()/2];
   return vec[med_idx];
 }
  
  template <class T>
    class Detrender {
  public:
    Detrender(int filter_size) {
      this->filter_size = filter_size;
      this->signal = Buffer<T>(filter_size);
      this->idx_med = filter_size / 2;
    }
    T detrend(T x);
  private:
    int filter_size;
    Buffer<T> signal;
    int idx_med;
  };

template <class T>
  T Detrender<T>::detrend(T x) {
  signal.push_back(x);
  if (!signal.full())
    return 0;
  T med_x = signal[idx_med];
  T med_signal = median<Buffer, T>(signal);
  return med_x - med_signal;
 }


 
}

#endif
